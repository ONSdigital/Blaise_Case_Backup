<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StatNeth.Blaise.API.Meta</name>
    </assembly>
    <members>
        <member name="T:StatNeth.Blaise.API.Meta.AlienStructure">
            <summary>
            Describes the kind of alien procedures that are supported.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.AlienStructure.WcfService">
            <summary>
            Use a WCF (Windows Communication Foundation) service as alien procedure.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.FieldKind">
            <summary>
            The field kinds to be distinguished.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FieldKind.DataField">
            <summary>
            Data field.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FieldKind.AuxField">
            <summary>
            Auxiliary field.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.FieldPropertyDataKind">
            <summary>
            Indicates life time of a field property.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FieldPropertyDataKind.Temporary">
            <summary>
            Only available during interview session.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FieldPropertyDataKind.Persistent">
            <summary>
            Stored in database.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICheckDefinition">
            <summary>
            Describes a check in a datamodel, block, procedure or group.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICheckDefinition.LocalName">
            <summary>
            The local name of the check.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICheckDefinitionCollection">
            <summary>
            Contains items of type ICheckDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICheckDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICheckDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an ICheckDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an ICheckDefinition item.</param>
            <returns>An ICheckDefinition.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICheckDefinitionCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified check name?
            </summary>
            <param name="localName">The local name of the check to look for.</param>
            <returns>True if check is contained.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICheckDefinitionCollection.GetItem(System.String)">
            <summary>
            Returns an ICheckDefinition based on local name. 
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="localName">The local check name to search on.</param>
            <returns>An ICheckDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICheckInformation">
            <summary>
            Describes the check information.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICheckInformation.Type">
            <summary>
            The type of the check.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICheckInformation.Condition">
            <summary>
            The condition of the check.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICheckInformation.Texts">
            <summary>
            The texts with the role Constants.TextRoles.Message.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICheckInformation.BaseCheckCount">
            <summary>
            The number of actual checks that are defined by this check.
            Only meaningful if the check involves array members. In this case Type.Structure is Array.
            Can be null if the involved array has no upper bound.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICheckInformation.Parameters">
            <summary>
            The parameters that are used in the condition, if the check involves array members.
            In this case Type.Structure is Array.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICheckInformation.GetItemInformation">
            <summary>
            Information of items if the check involves array members.
            In this case Type.Structure is Array. Returns null otherwise.
            </summary>
            <returns>An ICheckInformation.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICheckInformation.RoleTexts">
            <summary>
            All the predefined and self-defined role texts for the check.
            If used on a check having mode dependent role texts, you should use the property ModeRoleTexts from ICheckInformation2.        
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICheckInformation.ID">
            <summary>
            Unique short ID for data storage.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IConstantDefinition">
            <summary>
            Describes a constant in a datamodel, block, procedure or group.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IConstantDefinition.Name">
            <summary>
            The name of the constant definition. If defined inside a block, procedure or group then the local constant name will 
            be prefixed with the name of the block, procedure or group and a '.'
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IConstantDefinition.Expression">
            <summary>
            The defined expression of the constant.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IConstantDefinitionCollection">
            <summary>
            Contains items of type IConstantDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IConstantDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IConstantDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IConstantDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IConstantDefinition item.</param>
            <returns>An IConstantDefinition.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IConstantDefinitionCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified constant name?
            </summary>
            <param name="localName">The local name of the constant to look for.</param>
            <returns>True if constant is contained.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IExternalDefinition">
            <summary>
            Describes the definition of an external in a datamodel or block.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExternalDefinition.LocalName">
            <summary>
            The local name.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExternalDefinition.DatamodelName">
            <summary>
            The name of the datamodel in UsedDatamodels of the main datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExternalDefinition.FieldFilter">
            <summary>
            Field filter for records obtained from the external database.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExternalDefinition.FileName">
            <summary>
            The local filename with a correct extension or the local file name of its datamodel.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IExternalDefinition2">
            <summary>
            Extends IExternalDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExternalDefinition2.IsDynamic">
            <summary>
            Indicates whether data of the external database can change.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IExternalDefinitionCollection">
            <summary>
            Contains items of type IExternalDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExternalDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExternalDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IExternalDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IExternalDefinition item.</param>
            <returns>An IExternalDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldDefinition">
            <summary>
            Describes a field definition in a datamodel, block, group or procedure.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldDefinition.LocalName">
            <summary>
            The local name.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldDefinitionCollection">
            <summary>
            Contains items of type IFieldDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IFieldDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IFieldDefinition item.</param>
            <returns>An IFieldDefinition.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IFieldDefinitionCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified field name?
            </summary>
            <param name="localName">The local name of the field to look for.</param>
            <returns>True if field is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IFieldDefinitionCollection.GetItem(System.String)">
            <summary>
            Returns an IFieldDefinition based on local field name. 
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="localName">The local field name to search on.</param>
            <returns>An IFieldDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldInformation">
            <summary>
            Describes the field information.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldInformation.IsRequired">
            <summary>
            Indicates whether an answer is required.
            If used on a multi mode field, you should either use the method GetIsRequired(mode) from IFieldInformation2, or work with a datamodel returned by IDatamodel2.GetModeDatamodel(string mode).
            </summary>
            <exception cref="T:System.InvalidOperationException">If used for multi mode field. In this case you should either use the method IFieldInformation2.GetIsRequired(mode), or work with a datamodel returned by IDatamodel2.GetModeDatamodel(string mode).</exception>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldInformation.FieldKind">
            <summary>
            The kind of the field: DataField or AuxField.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldInformation.SpecialAnswers">
            <summary>
            Returns the allowed special answers. This is the combination of special answers defined with the field and possible special answers belonging to the type definition.
            If used on a multi mode field, you should either use the method GetSpecialAnswers(mode) from IFieldInformation2, or work with a datamodel returned by IDatamodel2.GetModeDatamodel(string mode).
            Note: Empty is not considered a special answer, and will never be contained in the result collection. Use the property IsRequired for this.
            </summary>        
            <exception cref="T:System.InvalidOperationException">If used for multi mode field. In this case you should either use the method GetSpecialAnswers(mode) from IFieldInformation2, or work with a datamodel returned by IDatamodel2.GetModeDatamodel(string mode).</exception>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldInformation.Type">
            <summary>
            The field type.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldInformation.RoleTexts">
            <summary>
            All the predefined and self-defined role texts for the field. Typical role values are: Constants.TextRoles.Question and Constants.TextRoles.Description.
            If used on a field having mode dependent role texts, you should use the property ModeRoleTexts from IFieldInformation2.        
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldInformation.Tag">
            <summary>
            Secondary field identifier consisting of letters and digits.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IFieldInformation.GetItemInformation">
            <summary>
            Information of items of an array field. Only relevant if Type.Structure is Array. Is null otherwise.
            </summary>
            <returns>An IFieldInformation.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldInformation.IsGenerated">
            <summary>
            Indicates whether the field is generated during the creation of the runtime datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldInformation.ID">
            <summary>
            Unique short ID for data storage.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldInformation3">
            <summary>
            Extends IFieldInformation2.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IFieldInformation3.Size(System.Boolean,System.String)">
            <summary>
            *** This method is deprecated, because blaise4Compatible=False is no longer meaningful. Use IFieldInformation5.TextSize() instead. ***
            
            Returns the maximum number of characters that is used for a textual representation of a field value. 
            Typical usage is computation of column widths needed for text file export.
            Notes:
            - Returns 0 for a block field.
            - Returns the size of the member type in case of an array field.
            - Returns the size of the member type in case of a set field and blaise4Compatible= True. If blaise4Compatible= False, it returns the size the whole value representation uses at the maximum.
            - Returns 0 for an OPEN field.
            - In case blaise4Compatible= True, mode= string.Empty and the datamodel has modes this property returns the maximum of the size for each mode individual.
            </summary>
            <param name="blaise4Compatible">If True then the Blaise 4 conventions for representing special answers and set fields will be applied.</param>
            <param name="mode">The mode in case of a multi mode field. May be string.Empty (the default) for a datamodel without modes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When applied to a multi mode field and the given mode is invalid.</exception>
            <returns>An integer value.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldInformation4">
            <summary>
            Extends IFieldInformation3.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldInformation4.AllSpecialAnswers">
            <summary>
            Returns the allowed special answers as defined over all modes. This is the combination of special answers defined with the field and possible special answers belonging to the type definition.
            If the datamodel does not have modes, then this property is identical with IFieldInformation.SpecialAnswers.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldInformation5">
            <summary>
            Extends IFieldInformation4.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IFieldInformation5.TextSize(System.String)">
            <summary>
            This method replaces IFieldInformation3.Size(bool blaise4Compatible, string mode = "") by assuming
            the value True for the parameter blaise4Compatible.
            
            Returns the maximum number of characters that is used for a textual representation of a field value. 
            Typical usage is computation of column widths needed for text file export.
            Notes:
            - Returns 0 for a block field.
            - Returns the size of the member type in case of an array or set field.        
            - Returns 0 for an OPEN field.
            - In case mode= string.Empty and the datamodel has modes this property returns the maximum of the size for each mode individual.
            </summary>
            <param name="mode">The mode in case of a multi mode field. May be string.Empty (the default) for a datamodel without modes.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When applied to a multi mode field and the given mode is invalid.</exception>
            <returns>An integer value.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldInformation5.CategoryTexts">
            <summary>
            The texts defined with the categories for enumerated fields.
            Only contains elements if field has enumeration type, is an array of enum type or set AND at least one category contains a text with a fill.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldPropertyDefinition">
            <summary>
            Describes a field property for a data field.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldPropertyDefinition.Name">
            <summary>
            Name of the field property.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldPropertyDefinition.DataKind">
            <summary>
            Indicates whether the property is stored in the database or is only available during an interview session.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldPropertyDefinition.Type">
            <summary>
            The property type.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldPropertyDefinitionCollection">
            <summary>
            Contains items of type IFieldPropertyDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldPropertyDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldPropertyDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IFieldPropertyDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IFieldPropertyDefinition item.</param>
            <returns>An IFieldPropertyDefinition.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IFieldPropertyDefinitionCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified property name?
            </summary>
            <param name="name">The name of the property to look for.</param>
            <returns>True if property is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IFieldPropertyDefinitionCollection.GetItem(System.String)">
            <summary>
            Returns an IFieldPropertyDefinition based on name. 
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="name">The property name to search on.</param>
            <returns>An IFieldPropertyDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IGroupDefinition">
            <summary>
            Describes the definition of a group in a datamodel, block or group.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IGroupDefinition.LocalName">
            <summary>
            The local name of the group.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IGroupDefinition.RoleTexts">
            <summary>
            The possible texts of the group definition. For example question and/or description texts.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IGroupDefinition3">
            <summary>
            Extends IGroupDefinition2. Offers access to mode dependent route paths.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IGroupDefinition4">
            <summary>
            Extends IGroupDefinition3.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IGroupDefinition5">
            <summary>
            Extends IGroupDefinition4 with PreceedingFieldsCount
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IGroupDefinition5.PreceedingFieldsCount">
            <summary>
            Number of field definitions in defining scope that preceeded this group definition 
            This information is used in DataRecords to determine the order of fields in this group with respect to fields in the defining scope
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IGroupDefinitionCollection">
            <summary>
            Contains items of type IGroupDefinition.     
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IGroupDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IGroupDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IGroupDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IGroupDefinition item.</param>
            <returns>An IGroupDefinition.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IGroupDefinitionCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified group name?
            </summary>
            <param name="localName">The name of the group to look for.</param>
            <returns>True if group is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IGroupDefinitionCollection.GetItem(System.String)">
            <summary>
            Returns an IGroupDefinition based on local group name. 
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="localName">The local group name to search on.</param>
            <returns>An IGroupDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IHasGetIsRequired">
            <summary>
            Interface that offers IsRequired when modes are involved.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IHasGetIsRequired.GetIsRequired(System.String)">
            <summary>
            Retrieves whether the field is required for a specific mode. 
            </summary>
            <param name="mode">Name of the mode.</param>
            <returns>True if required, False if not.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IHasGetSpecialAnswers">
            <summary>
            Interface that offers mode specific special answers.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IHasGetSpecialAnswers.GetSpecialAnswers(System.String)">
            <summary>
            Retrieves the special answers that are allowed for a specific mode.
            </summary>
            <param name="mode">Name of the mode.</param>
            <returns>An ISpecialAnswerCollection.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ILocalDefinition">
            <summary>
            Describes the definition of a local in a datamodel, block, procedure or group.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILocalDefinition.LocalName">
            <summary>
            The local name of the definition of the local.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ILocalDefinitionCollection">
            <summary>
            Contains items of type ILocalDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILocalDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILocalDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an ILocalDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an ILocalDefinition item.</param>
            <returns>An ILocalDefinition.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ILocalDefinitionCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified local name?
            </summary>
            <param name="localName">The name of the local to look for.</param>
            <returns>True if local is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ILocalDefinitionCollection.GetItem(System.String)">
            <summary>
            Returns an ILocalDefinition based on local item name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="localName">The local item name to search on.</param>
            <returns>An ILocalDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ILocalInformation">
            <summary>
            Describes the information of a local.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILocalInformation.Type">
            <summary>
            The type of the local.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ILocalInformation.GetItemInformation">
            <summary>
            Information of items of an array local. Only relevant if Type.Structure is Array. Is null otherwise.
            </summary>
            <returns>An ILocalInformation.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILocalInformation.IsGenerated">
            <summary>
            Indicates whether the field is generated during the creation of the runtime datamodel.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICheckDefinition2">
            <summary>
            Check definition of a multimode datamodel. Extends ICheckDefinition.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICheckInformation2">
            <summary>
            Check information of multimode datamodel. Extends ICheckInformation.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldDefinition2">
            <summary>
            Field definition of multimode datamodel. Extends IFieldDefinition.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldInformation2">
            <summary>
            Extends IFieldInformation. Offers e.g. field information for multimode datamodel. 
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IGroupDefinition2">
            <summary>
            Group definition of multimode datamodel. Extends IGroupDefinition.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IObjectInformation">
            <summary>
            Describes a defined object like field, local, check etc.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.Structure">
            <summary>
            The object structure like Field, Local, Check etc.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.IsRequired">
            <summary>
            Indicates whether an answer is required. Only relevant for structure Field. Returns false otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.FieldKind">
            <summary>
            The kind of the field like DataField or AuxField. Only relevant for structure Field. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.SpecialAnswers">
            <summary>
            Returns the allowed special answers. Only relevant for structure Field. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.Type">
            <summary>
            The type of a field, local, parameter or check. Returns null for structure Group and External.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.RoleTexts">
            <summary>
            The role texts of a field, group or check. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.Tag">
            <summary>
            Secondary field identifier consisting of letters and digits. Only relevant for structure Field. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IObjectInformation.GetItemInformation">
            <summary>
            Object information of items of an array field. Only relevant if structure is different
            from External and Group and Type.Structure is Array. Returns null otherwise.
            </summary>
            <returns>An IObjectInformation.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.IsGenerated">
            <summary>
            Indicates whether the field, local or parameter is generated during the creation of the runtime datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.Condition">
            <summary>
            The condition of the check. Only relevant for structure Check. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.CheckTexts">
            <summary>
            Possible texts defined with the check. The texts for the role Constants.TextRoles.Message are returned.
            Only relevant for structure Check. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.BaseCheckCount">
            <summary>
            The number of actual checks that are defined by this check.
            Only meaningful if the check involves array members inside one or more for loops. In this case Type.Structure is Array.
            Can be null if the involved array has no upper bound. Only relevant for structure Check. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.CheckParameters">
            <summary>
            The locals that are used in the condition, if the check involves array members and is defined within one or more for loops.
            In this case Type.Structure is Array. Only relevant for structure Check. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.DatamodelName">
            <summary>
            Name of the used datamodel (from Datamodels in the main datamodel) of an external, or of a parameter in case the parameter is an external.
            Only relevant for structure External and Parameter. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.ExternalFieldFilter">
            <summary>
            Field filter for records obtained from the external database. Only relevant for structure External. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.ExternalFileName">
            <summary>
            The local filename with a correct extension or the local file name of its datamodel. Only relevant for structure External. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IObjectInformation.ParameterUsage">
            <summary>
            The usage of the parameter like Import or Export. Only relevant for structure Parameter. Returns null otherwise.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IParameterDefinition">
            <summary>
            Describes a parameter in a block, procedure or array check.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParameterDefinition.Name">
            <summary>
            The (local) name of the parameter.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IParameterDefinitionCollection">
            <summary>
            Contains items of type IParameterDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParameterDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParameterDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IParameterDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IParameterDefinition item.</param>
            <returns>An IParameterDefinition.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IParameterDefinitionCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified parameter name?
            </summary>
            <param name="localName">The name of the parameter to look for.</param>
            <returns>True if parameter is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IParameterDefinitionCollection.GetItem(System.String)">
            <summary>
            Returns an IParameterDefinition based on local name. 
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="localName">The local name to search on.</param>
            <returns>An IParameterDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IParameterInformation">
            <summary>
            Describes the information of a parameter.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParameterInformation.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParameterInformation.Usage">
            <summary>
            The usage of the parameter like Import or Export.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParameterInformation.DatamodelName">
            <summary>
            Name of the used datamodel of the external in case the parameter is an external. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParameterInformation.IsGenerated">
            <summary>
            Indicates whether the parameter is generated during the creation of the runtime datamodel.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IProcedureDefinition">
            <summary>
            Describes a procedure definition in a datamodel, block or procedure.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IProcedureDefinition.Structure">
            <summary>
            The structure of the procedure: Normal or Alien.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IProcedureDefinition.AlienStructure">
            <summary>
            The kind of alien procedure. Returns null in case the structure is Normal.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IProcedureDefinition.WcfServiceAddress">
            <summary>
            WCF service address. Returns string.Empty in case AlienStructure is different from WcfService.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IProcedureDefinition.WcfServiceContractName">
            <summary>
            WCF service contract name. Returns string.Empty in case AlienStructure is different from WcfService.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IProcedureDefinition.WcfServiceMethodName">
            <summary>
            WCF service method name. Returns string.Empty in case AlienStructure is different from WcfService.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IProcedureDefinition.WcfServiceNameSpace">
            <summary>
            WCF service name space. Returns string.Empty in case AlienStructure is different from WcfService.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IProcedureDefinition2">
            <summary>
            Extends IProcedureDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IProcedureDefinition2.ResultType">
            <summary>
            The result type in case the procedure is a function. Returns null otherwise.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IProcedureDefinitionCollection">
            <summary>
            Contains items of type IProcedureDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IProcedureDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IProcedureDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IProcedureDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IProcedureDefinition item.</param>
            <returns>An IProcedureDefinition.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IProcedureDefinitionCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified procedure name?
            </summary>
            <param name="hierarchicalName">The name of the procedure to look for.</param>
            <returns>True if procedure is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IProcedureDefinitionCollection.GetItem(System.String)">
            <summary>
            Returns an IProcedureDefinition based on hierarchical name. 
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="hierarchicalName">The hierarchical name to search on.</param>
            <returns>An IProcedureDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ISpecialAnswerCollection">
            <summary>
            Represents the allowed special answers of a field.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ISpecialAnswerCollection.IsAllowed(System.String)">
            <summary>
            Is the special answer allowed? The result of this method is the same as Contains(specialAnswer).
            </summary>
            <param name="specialAnswer">The special answer like Constants.SpecialAnswerNames.DontKnow or Constants.SpecialAnswerNames.Refusal.</param>
            <returns>True if the special answer is allowed. False otherwise.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ISpecialAnswerCollection2">
            <summary>
            Extends ISpecialAnswerCollection.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ISpecialAnswerCollection2.GetSpecialAnswerTextFileValue(System.String)">
            <summary>
            Translates a special answer into a value that can be used in text files.
            Returns string.Empty if the special answer is not allowed.
            </summary>
            <param name="specialAnswer">The special answer value.</param>
            <returns>A string value to be used in a text file.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ISpecialAnswerCollection2.IsAllowed(System.String)">
            <summary>
            Is the special answer allowed? The result of this method is the same as Contains(specialAnswer).
            </summary>
            <param name="specialAnswer">The special answer like Constants.SpecialAnswerNames.DontKnow or Constants.SpecialAnswerNames.Refusal.</param>
            <returns>True if the special answer is allowed. False otherwise.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ParameterUsage">
            <summary>
            Describes the possible uses of a parameter.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ParameterUsage.Import">
            <summary>
            Import.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ParameterUsage.Export">
            <summary>
            Export.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ParameterUsage.Transit">
            <summary>
            Transit.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ProcedureStructure">
            <summary>
            Describes the structure of a procedure.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureStructure.Normal">
            <summary>
            Normal procedure.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureStructure.Alien">
            <summary>
            Alien procedure.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICariFieldDefinition">
            <summary>
            Base interface for CARI field definitions.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariFieldDefinition.Name">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICariSettings">
            <summary>
            A group of CARI settings.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettings.Name">
            <summary>
            The settings name.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettings.SessionChance">
            <summary>
            A value in the range 0 through 100 that specifies the chance that recording is activated for the data entry session.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettings.FieldChance">
            <summary>
            A global value in the range 0 through 100 that specifies the chance that recording is activated for a question. Hundred means sure yes and zero means for sure no recording. This value can be overruled per field.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettings.KeepNoConsentRecording">
            <summary>
            Determines whether recordings of consent fields should be preserved.
            If True always, if False only when consent is lent.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettings.Enabled">
            <summary>
            A boolean expression, that evaluates to True or False. Can be used to enable/disable the recorder.
            Can be null.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettings.MaxTime">
            <summary>
            The maximum recording duration (minutes : seconds).
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettings.MinTime">
            <summary>
            The minimum recording duration (minutes : seconds). 
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettings.ConsentFields">
            <summary>
            The fields that serve as consent fields.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettings.RecordedFields">
            <summary>
            The fields that can be recorded.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICariSettingsCollection">
            <summary>
            Contains items of type ICARISettings.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettingsCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICariSettingsCollection.Item(System.Int32)">
            <summary>
            Returns an ICARISettings based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index.</param>
            <returns>An ICARISettings.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICariSettingsCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified settings name?
            </summary>
            <param name="settingsName">Name of CARI settings to look for.</param>
            <returns>True if settings is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICariSettingsCollection.GetItem(System.String)">
            <summary>
            Returns an ICARISettings item based on settings name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="settingsName">Name of settings to find.</param>
            <returns>An ICARISettings.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IConsentFieldDefinition">
            <summary>
            Offers access to a CARI consent field definition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IConsentFieldDefinition.Condition">
            <summary>
            The lent value specified as an expression. When this condition evaluates to false, recording stops until the program arrives at the next consent field on route.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IConsentFieldDefinitionCollection">
            <summary>
            Contains items of type IConsentFieldDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IConsentFieldDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IConsentFieldDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IConsentFieldDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index.</param>
            <returns>An IConsentFieldDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IRecordedFieldDefinition">
            <summary>
            Offers access to a CARI recorded field definition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRecordedFieldDefinition.Chance">
            <summary>
            A value in the range 0 through 100 that specifies the chance that recording is activated for this field. Hundred means sure yes and zero means for sure no recording. 
            This value overrules the vale of ICariSettings.FieldChance.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRecordedFieldDefinition.Enabled">
            <summary>
            A boolean expression, that evaluates to True or False. Can be used to include/exclude a field from the list of recorded fields.
            Can be null.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IRecordedFieldDefinitionCollection">
            <summary>
            Contains items of type IRecordedFieldDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRecordedFieldDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRecordedFieldDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IRecordedFieldDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index.</param>
            <returns>An IRecordedFieldDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.CompatibilityResult">
            <summary>
            Describes degree of compatibility between two datamodels.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.CompatibilityResult.Incompatible">
            <summary>
            Incompatible.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.CompatibilityResult.DataCompatible">
            <summary>
            Data is compatible (Harmless change).
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.CompatibilityResult.SessionCompatible">
            <summary>
            Session Data is compatible (Harmless change).
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IBlockCompareInfo">
            <summary>
            Describes differences per block when comparing this datamodel with an older version.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlockCompareInfo.BlockName">
            <summary>
            The hierarchical block name. Returns string.Empty for the main block.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlockCompareInfo.AreFieldsAdded">
            <summary>
            Are fields added to BlockName of this datamodel?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlockCompareInfo.AreChecksAdded">
            <summary>
            Are checks added to BlockName of this datamodel?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlockCompareInfo.ExtendedFieldNames">
            <summary>
            List of field names of BlockName of which the type was extended: eg from string[10] to string[20].
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlockCompareInfo.AddedFieldNames">
            <summary>
            List of field names that were added to BlockName.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IBlockCompareInfoCollection">
            <summary>
            Contains items of type IBlockCompareInfo.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlockCompareInfoCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlockCompareInfoCollection.Names">
            <summary>
            The (block) names in the collection.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IBlockCompareInfoCollection.Get(System.String)">
            <summary>
            Returns an item by hierarchical block name. Returns null if item not found.
            </summary>
            <param name="name">The (block) name to look for.</param>
            <returns>An IBlockCompareInfo.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICompareResult">
            <summary>
            Describes the result of comparing two datamodels.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICompareResult.Result">
            <summary>
            The result.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICompareResult.ErrorMessages">
            <summary>
            Messages describing the reasons of incompatibility.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFieldCompareInfo">
            <summary>
            Compare info for a field.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldCompareInfo.HierarchicalName">
            <summary>
            The hierarchical name of the field.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFieldCompareInfo.IsArrayIndex">
            <summary>
            Is it an array index?
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.Constants.KeyNames">
            <summary>
            Predefined key names.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.KeyNames.Primary">
            <summary>
            The primary key.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.KeyNames.Secondary">
            <summary>
            The (predefined) secondary key.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.KeyNames.Trigram">
            <summary>
            A trigram key.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.Constants.SpecialAnswerNames">
            <summary>
            Predefined special answer names.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.SpecialAnswerNames.Empty">
            <summary>
            Special answer Empty.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.SpecialAnswerNames.DontKnow">
            <summary>
            Special answer DontKnow.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.SpecialAnswerNames.Refusal">
            <summary>
            Special answer Refusal.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.Constants.TextRoles">
            <summary>
            Predefined text roles.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.TextRoles.Question">
            <summary>
            The question text role.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.TextRoles.Description">
            <summary>
            The description text role.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.TextRoles.ShortDescription">
            <summary>
            The short description text role.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.TextRoles.Category">
            <summary>
            Default role for category texts.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.TextRoles.Title">
            <summary>
            Default role for datamodel texts.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.Constants.TextRoles.Message">
            <summary>
            Default role for condition texts and error texts.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.AuditTrailLevel">
            <summary>
            Specifies the level of audit trail detail.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.AuditTrailLevel.None">
            <summary>
            No audit trail will be active.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.AuditTrailLevel.Session">
            <summary>
            Only information at the session level will be recorded: eg StartSession, SwitchSession. This is the least detailed level.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.AuditTrailLevel.Page">
            <summary>
            Extends the Session level with events like UpdatePage, Action.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.AuditTrailLevel.Field">
            <summary>
            The same as Session and Page plus events like EnterField, LeaveField.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.AuditTrailLevel.Answer">
            <summary>
            The same as Session, Page and Field plus events like SpecialAnswer, Classify, Lookup.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.AuditTrailLevel.Keyboard">
            <summary>
            The same as Session, Page, Field and Answer but extended with keystroke events. This is the most detailed level.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.CompareEvaluationBehaviour">
            <summary>
            Determines how the compare functions are evaluated.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.CompareEvaluationBehaviour.Strict">
            <summary>
            Fields with DK, RF or EMPTY are not equal to the default value. An empty string '' is unequal to the special value EMPTY.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.CompareEvaluationBehaviour.Blaise4Compatible">
            <summary>
            Blaise 4 compatible: DK, RF and EMPTY are equal to the default value of the type of the field.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.CultureSource">
            <summary>
            Specifies where the culture for data entry should be derived from.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.CultureSource.Client">
            <summary>
            Use the client culture.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.CultureSource.DatamodelLanguage">
            <summary>
            Use the culture attached to the datamodel language.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.DataMode">
            <summary>
            DataMode determines how (session) data is treated.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.DataMode.Writeable">
            <summary>
            Data can be written to database.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.DataMode.ReadOnly">
            <summary>
            Data will not be written to database (and input controls in DEP should be read only).
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.DataMode.ReadOnlyWithExperiments">
            <summary>
            Data will not be written to database, but modification in DEP is allowed.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ErrorsReachabilityInfluence">
            <summary>
            Determines whether Errors influence which fields can be visited.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ErrorsReachabilityInfluence.None">
            <summary>
            No influence.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ErrorsReachabilityInfluence.MustBeSolvedImmediately">
            <summary>
            A field with an error can not be passed.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ExpressionEvaluationBehaviour">
            <summary>
            Determines whether correctness of expression results is used.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ExpressionEvaluationBehaviour.UseResultStatus">
            <summary>
            Determine correctness status of result, and stop computation on incorrect results.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ExpressionEvaluationBehaviour.PretendResultsAreAlwaysCorrect">
            <summary>
            If a result cannot be computed, replace it by a default value.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.FormAccessMode">
            <summary>
            Determines how forms for an interview are obtained.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FormAccessMode.New">
            <summary>
            Only new forms are allowed.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FormAccessMode.Get">
            <summary>
            Only existing forms are allowed.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FormAccessMode.TryGet">
            <summary>
            Both existing and new forms are allowed.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDataEntrySettings">
            <summary>
            Describes a group of data entry settings.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.Name">
            <summary>
            The name that identifies the data entry settings. For example 'StrictInterviewing'.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.StartParallelName">
            <summary>
            Parallel that should be activated at the start of the interview.
            If the datamodel has a primary key, this parallel will be activated as soon as the primary key value has been determined.
            See also StartFieldAction.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.StartFieldAction">
            <summary>
            Specifies the field (first or last) of StartParallelName that should be on route at the start of the interview.
            If the datamodel has a primary key, this field will be on route as soon as the primary key value has been determined.
            See also StartParallelName.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.ExpressionRouteInformationSource">
            <summary>
            Determines which route information is used for evaluation of data field expressions.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.ReachabilityRouteInformationSource">
            <summary>
            Determines which route information is used to determine that a field can be visited.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.ExpressionEvaluationBehaviour">
            <summary>
            Determines whether correctness of expression results is used.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.RouteFilter">
            <summary>
            Specifies required RouteStatus values for reachable fields. Relates to the setting 'Skip show fields at keyboard navigation'.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.ErrorsReachabilityInfluence">
            <summary>
            Determines whether Errors influence which fields can be visited.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.FormAccessMode">
            <summary>
            Determines which forms are allowed in an interview.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.PageRefreshMode">
            <summary>
            Determines when the rules are executed to refresh the page.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.HideSpecialAnswerFirstTime">
            <summary>
            Hide special answers the first time a respondent enters a page?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings.HideSpecialAnswerWhenResponse">
            <summary>
            Hide the possibility of special answers once the field got a normal response?
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDataEntrySettings2">
            <summary>
            Extends IDataEntrySettings.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings2.AuditTrailLevel">
            <summary>
            Specifies the level of audit trail detail that is desired.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDataEntrySettings3">
            <summary>
            Extends IDataEntrySettings2.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings3.ApplyRecordLocking">
            <summary>
            Should record lcoking be applied?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings3.CultureSource">
            <summary>
            Specifies where the culture for data entry should be derived from.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDataEntrySettings5">
            <summary>
            Extends IDataEntrySettings4.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings5.DisableAutoFocus">
            <summary>
            Determines if the client should AutoFocus the Active Question
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings5.UseSkipLinks">
            <summary>
            Determines if skip links should be generated/used
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDataEntrySettings4">
            <summary>
            Extends IDataEntrySettings3.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings4.CompareEvaluationBehaviour">
            <summary>
            Determines how the compare functions are evaluated.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings4.SessionTimeout">
            <summary>
            The session timeout. 0: take server timeout (default). negative: sessions do not expire. positive: survey specific timeout.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDataEntrySettings8">
            <summary>
            Extends IDataEntrySettings7.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings8.UseTextSizeCalculation">
            <summary>
            Should text sizes be calculcated using predefined font information (for faster rendering in older browsers)
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings8.DataMode">
            <summary>
            Determines how (session) data is treated. Replaces IsDataReadOnly.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDataEntrySettings7">
            <summary>
            Extends IDataEntrySettings6.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings7.OptimizeNoStylesheets">
            <summary>
            Should pages be optimized for readability without stylesheets
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings7.KeyboardNavigation">
            <summary>
            What type of keyboard navigation should be used
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings7.AutoSelectInputContent">
            <summary>
            Should the content of the input control be selected automatically?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings7.IsDataReadOnly">
            <summary>
            Should Data Entry program consider fields read-only?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings7.EnableGPS">
            <summary>
            Should the Data Entry Program send GPS coordinates with each request to the server
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDataEntrySettings6">
            <summary>
            Extends IDataEntrySettings5.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings6.SaveOnTimeout">
            <summary>
            Should session data be saved in case the session expires?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings6.SaveOnQuit">
            <summary>
            Should session data be saved in case the respondent concludes the session before the questionnaire is completed?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings6.DeleteSessionOnTimeout">
            <summary>
            Should session data be deleted in case the session expires?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings6.DeleteSessionOnQuit">
            <summary>
            Should session data be deleted in case the respondent quits the session before the questionnaire is completed?
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDataEntrySettings9">
            <summary>
            Extends IDataEntrySettings8.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings9.UseCati">
            <summary>
            When Use CATI is enabled the CATI case management is activated.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettings9.LoginRequired">
            <summary>
            When Login Required is enabled the interviewer is prompted for a user name and password at the start of a questionnaire.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDataEntrySettingsCollection">
            <summary>
            Contains items of type IDataEntrySettings.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettingsCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDataEntrySettingsCollection.Item(System.Int32)">
            <summary>
            Returns an IDataEntrySettings based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index.</param>
            <returns>An IDataEntrySettings.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDataEntrySettingsCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified data entry settings name?
            </summary>
            <param name="settingsName">Name of data entry settings to look for.</param>
            <returns>True if data entry settings is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDataEntrySettingsCollection.GetItem(System.String)">
            <summary>
            Returns an IDataEntrySettings item based on data entry settings name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="settingsName">Name of data entry settings to find.</param>
            <returns>An IDataEntrySettings.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.KeyboardNavigation">
            <summary>
            Specifies where the culture for data entry should be derived from.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.KeyboardNavigation.Interviewing">
            <summary>
            Use the Interviewing keyboard navigation.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.KeyboardNavigation.DataEditing">
            <summary>
            Use the Data Editing keyboard navigation
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.KeyboardNavigation.None">
            <summary>
            Use no special keyboard navigation
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.PageRefreshMode">
            <summary>
            Determines when the rules are executed to refresh the page.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.PageRefreshMode.QuestionChange">
            <summary>
            When the value of a question is changed.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.PageRefreshMode.PageSwitch">
            <summary>
            Only when an other page is visited.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.RouteFilter">
            <summary>
            Determines on what route statuses to filter.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteFilter.Ask">
            <summary>
            Filter on ask fields. Is the same as when the option 'Skip show fields at keyboard navigation' is checked in the Advanced settings tab in the Control Centre.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteFilter.Show">
            <summary>
            Filter on show fields. Is the same as when the option 'Skip show fields at keyboard navigation' is unchecked in the Advanced settings tab in the Control Centre.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.RouteInformationSource">
            <summary>
            Describes whether route information should be obtained from the datamodel definition 
            or from the RouteStatus of the field. 
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteInformationSource.DatamodelDefinition">
            <summary>
            The defined RouteStatus according to the statements in the datamodel. 
            A field can have multiple defined RouteStatus values.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteInformationSource.RuntimeRouteStatus">
            <summary>
            The run time RouteStatus of a field.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.StartFieldAction">
            <summary>
            The field that should be on route at start.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.StartFieldAction.FirstField">
            <summary>
            First field on route.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.StartFieldAction.LastField">
            <summary>
            Last field on route.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IMode">
            <summary>
            Describes a mode.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMode.Name">
            <summary>
            The mode name.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMode.RoleTexts">
            <summary>
            The role texts defined with the mode.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IModeCollection">
            <summary>
            Contains items of type IMode.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeCollection.Item(System.Int32)">
            <summary>
            Returns an IMode item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an ILanguage item.</param>
            <returns>An IMode.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IModeCollection.IndexOf(System.String)">
            <summary>
            Returns index of an IMode by name.
            </summary>
            <param name="name">The mode name.</param>
            <returns>The index. Returns -1 if not found.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinition2">
            <summary>
            Special Answer Definition of MultiMode datamodel. Extends ISpecialAnswerDefinition.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinition">
            <summary>
            Describes the definition of a special answer.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinition.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinition.RoleTexts">
            <summary>
            The role texts. Will only contain items if there are role texts defined with the special answer, not attached to 
            a specific mode. When there are mode specific role texts, you should use IDatamodel2.SpecialAnswersDictionary
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinitionCollection">
            <summary>
            Contains items of type ISpecialAnswerDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinitionCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an ISpecialAnswerDefinition item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an ISpecialAnswerDefinition item.</param>
            <returns>An ISpecialAnswerDefinition.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinitionCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified SpecialAnswerDefinition name?
            </summary>
            <param name="name">The name of the SpecialAnswerDefinition to look for.</param>
            <returns>True if the SpecialAnswerDefinition is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinitionCollection.GetItem(System.String)">
            <summary>
            Returns an ISpecialAnswerDefinition item based on SpecialAnswerDefinition name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="name">The name of the SpecialAnswerDefinition.</param>
            <returns>An ISpecialAnswerDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinitionCollection2">
            <summary>
            Extends ISpecialAnswerDefinitionCollection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ISpecialAnswerDefinitionCollection2.AllNames">
            <summary>
            The names of all special answers including the system special answers (DontKnow, Refusal).
            </summary>
            <returns>An IStringCollection.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IUsedDatamodel">
            <summary>
            Describes a reference to a datamodel in the USES section of the main model.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IUsedDatamodel.DataChecksum">
            <summary>
            Data checksum of the used datamodel when the main datamodel was prepared.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IUsedDatamodel.Datamodel">
            <summary>
            Offers access to the datamodel. Can return null if the datamodel could not be found; for instance if no datamodel search path was specified.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IFileReference">
            <summary>
            Reference to a used datamodel or library.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFileReference.Name">
            <summary>
            The name that is used in the datamodel to refer to a file.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IFileReference.FileName">
            <summary>
            Local file name.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IKeyDefinition">
            <summary>
            Describes a key definition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IKeyDefinition.Name">
            <summary>
            The name of the key.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IKeyDefinition.Kind">
            <summary>
            The key kind: primary, secondary or trigram.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IKeyDefinition.Fields">
            <summary>
            The name expressions of the fields that make up the key. 
            Note that if the key consists of block fields, then only expressions for the end (data) fields are contained.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IKeyDefinitionCollection">
            <summary>
            Contains items of type IKeyDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IKeyDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IKeyDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IKeyDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IKeyDefinition item.</param>
            <returns>An IKeyDefinition.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IKeyDefinitionCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified key name?
            </summary>
            <param name="keyName">The name of the key to look for.</param>
            <returns>True if the key is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IKeyDefinitionCollection.GetItem(System.String)">
            <summary>
            Returns an IKeyDefinition item based on key name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="keyName">The key name.</param>
            <returns>An IKeyDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ILanguage">
            <summary>
            Describes a defined language.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILanguage.Name">
            <summary>
            The name of the language.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILanguage.Description">
            <summary>
            The description of the language.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILanguage.IsActive">
            <summary>
            Is the language accessible in a data entry session?
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ILanguageCollection">
            <summary>
            Contains items of type ILanguage.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILanguageCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILanguageCollection.Item(System.Int32)">
            <summary>
            Returns an ILanguage item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an ILanguage item.</param>
            <returns></returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ILanguageCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified language name?
            </summary>
            <param name="languageName">The name of the language to look for.</param>
            <returns>True if the language is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ILanguageCollection.GetItem(System.String)">
            <summary>
            Returns an ILanguage item based on language name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="languageName">The name of the language.</param>
            <returns>An ILanguage.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IParallelDefinition">
            <summary>
            Describes a parallel definition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParallelDefinition.Name">
            <summary>
            The defined name of the parallel. Can be string.Empty.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParallelDefinition.FieldName">
            <summary>
            An expression representing a block field or array of block fields.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParallelDefinition.RoleTexts">
            <summary>
            All the predefined and self-defined role texts for the parallel. Typical role values are: 
            Constants.TextRoles.Description and Constants.TextRoles.ShortDescription.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IParallelDefinitionCollection">
            <summary>
            Contains items of type IParallelDefinition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParallelDefinitionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IParallelDefinitionCollection.Item(System.Int32)">
            <summary>
            Returns an IParallelDefinition based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IParallelDefinition item.</param>
            <returns>An IParallelDefinition.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IUsedDatamodelCollection">
            <summary>
            Collection of IUsedDatamodel items.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IUsedDatamodelCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IUsedDatamodelCollection.Item(System.Int32)">
            <summary>
            Returns an IUsedDatamodel based on index. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IUsedDatamodel item.</param>
            <returns>An IUsedDatamodel.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IUsedDatamodelCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified datamodel name?
            </summary>
            <param name="datamodelName">Name of used datamodel to look for. This is the name that is used in the main datamodel.</param>
            <returns>True if data model is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IUsedDatamodelCollection.GetItem(System.String)">
            <summary>
            Returns an IUsedDatamodel item based on the name that is used in the main datamodel to refer to a different datamodel.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="datamodelName">Name of used datamodel to find. This is the name that is used in the main datamodel.</param>
            <returns>An IUsedDatamodel.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IUsedLibrary">
            <summary>
            Describes a library used by a datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IUsedLibrary.TypeChecksum">
            <summary>
            Checksum of types of the library when the datamodel was prepared.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IUsedLibrary.DataChecksum">
            <summary>
            Checksum of data of the library when the datamodel was prepared.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IUsedLibrary.Library">
            <summary>
            Offers access to the library. Can return null if the library could not be found; for instance if no library search path was specified.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IUsedLibraryCollection">
            <summary>
            Collection of IUsedLibrary items.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IUsedLibraryCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IUsedLibraryCollection.Item(System.Int32)">
            <summary>
            Returns an IUsedLibrary based on index. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index.</param>
            <returns>An IUsedLibrary.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IUsedLibraryCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified library name?
            </summary>
            <param name="libraryName">Name of used library to look for. This is the name that is used in the main datamodel.</param>
            <returns>True if library is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IUsedLibraryCollection.GetItem(System.String)">
            <summary>
            Returns an IUsedLibrary item based on a library name that is used in the main datamodel to refer to a library.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="libraryName">Name of used library to find. This is the name that is used in the main datamodel.</param>
            <returns>An IUsedLibrary.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.KeyKind">
            <summary>
            Describes the possible kinds of keys.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.KeyKind.Primary">
            <summary>
            Primary.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.KeyKind.Secondary">
            <summary>
            Secondary.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.KeyKind.Trigram">
            <summary>
            Trigram.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.EntityStructure">
            <summary>
            Describes the structure of an IMetaEntity.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.EntityStructure.Datamodel">
            <summary>
            The meta entity is an IDatamodel.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.EntityStructure.Library">
            <summary>
            The meta entity is an ILibrary.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.FieldStatus">
            <summary>
            Describes the kind of a field status expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FieldStatus.Empty">
            <summary>
            Empty.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FieldStatus.SpecialAnswer">
            <summary>
            SpecialAnswer.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FieldStatus.Response">
            <summary>
            Response.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.FunctionIdentifier">
            <summary>
            Describes an identifier to be used in an applied function expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Equal">
            <summary>
            Equal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.NotEqual">
            <summary>
            NotEqual.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.EqualBlock">
            <summary>
            EqualBlock.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.NotEqualBlock">
            <summary>
            NotEqualBlock.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.And">
            <summary>
            And.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Or">
            <summary>
            Or.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Not">
            <summary>
            Not.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Less">
            <summary>
            Less.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.LessEqual">
            <summary>
            LessEqual.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Greater">
            <summary>
            Greater.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.GreaterEqual">
            <summary>
            GreaterEqual.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PlusInt">
            <summary>
            PlusInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PlusReal">
            <summary>
            PlusReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PlusString">
            <summary>
            PlusString.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PlusDeltaDate">
            <summary>
            PlusDeltaDate.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PlusDateInt">
            <summary>
            PlusDateInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PlusDeltaTime">
            <summary>
            PlusDeltaTime.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PlusTimeInt">
            <summary>
            PlusTimeInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PlusTime">
            <summary>
            PlusTime.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.UnaryPlusInt">
            <summary>
            UnaryPlusInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.UnaryPlusReal">
            <summary>
            UnaryPlusReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinusInt">
            <summary>
            MinusInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinusReal">
            <summary>
            MinusReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinusDeltaTime">
            <summary>
            MinusDeltaTime.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinusTimeInt">
            <summary>
            MinusTimeInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinusDeltaDate">
            <summary>
            MinusDeltaDate.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinusDateInt">
            <summary>
            MinusDateInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinusDate">
            <summary>
            MinusDate.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinusTime">
            <summary>
            MinusTime.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.NegateInt">
            <summary>
            ,.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.NegateReal">
            <summary>
            NegateReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MultInt">
            <summary>
            MultInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MultReal">
            <summary>
            MultReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.DivisionReal">
            <summary>
            DivisionReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Round">
            <summary>
            Round.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.InNumberRange">
            <summary>
            InNumberRange.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Year">
            <summary>
            Year.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Month">
            <summary>
            Month.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Day">
            <summary>
            Day.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SysDate">
            <summary>
            SysDate.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ToDate">
            <summary>
            ToDate.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Age">
            <summary>
            Age.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Hour">
            <summary>
            Hour.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Minute">
            <summary>
            Minute.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Second">
            <summary>
            Second.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SysTime">
            <summary>
            SysTime.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ToTime">
            <summary>
            ToTime.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Len">
            <summary>
            Len.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Cardinal">
            <summary>
            Cardinal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.InSet">
            <summary>
            InSet.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.InEnumRange">
            <summary>
            InEnumRange.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SetElement">
            <summary>
            SetElement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.OrdEnum">
            <summary>
            OrdEnum.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.OrdString">
            <summary>
            OrdString.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ClassToStr">
            <summary>
            ClassToStr.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ClassSubLevel">
            <summary>
            ClassSubLevel.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.IsIncomplete">
            <summary>
            IsIncomplete.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Search">
            <summary>
            Search.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Result">
            <summary>
            Result.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.FormStatus">
            <summary>
            FormStatus.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Cadi">
            <summary>
            Cadi.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Capi">
            <summary>
            Capi.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Cati">
            <summary>
            Cati.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Cawi">
            <summary>
            Cawi.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ReserveCheck">
            <summary>
            ReserveCheck.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ActiveLanguage">
            <summary>
            ActiveLanguage.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Trunc">
            <summary>
            Trunc.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.WeekDay">
            <summary>
            WeekDay.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Week">
            <summary>
            Week.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Julian">
            <summary>
            Julian.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.AbsTime">
            <summary>
            AbsTime.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Exp">
            <summary>
            Exp.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Int">
            <summary>
            Int.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Ln">
            <summary>
            Ln.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.UpperCase">
            <summary>
            UpperCase.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.LowerCase">
            <summary>
            LowerCase.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.TimeToStr">
            <summary>
            TimeToStr.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.DateToStr">
            <summary>
            DateToStr.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.StrToDate">
            <summary>
            StrToDate.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.StrToTime">
            <summary>
            StrToTime.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Str">
            <summary>
            Str.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Depth">
            <summary>
            Depth.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Modulo11">
            <summary>
            Modulo11.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Modulo11S">
            <summary>
            Modulo11S.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Char">
            <summary>
            Char.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SubString">
            <summary>
            SubString.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Mod">
            <summary>
            Mod.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Val">
            <summary>
            Val.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Frac">
            <summary>
            Frac.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Sqrt">
            <summary>
            Sqrt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SqrInt">
            <summary>
            SqrInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SqrReal">
            <summary>
            SqrReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.AbsInt">
            <summary>
            AbsInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.AbsReal">
            <summary>
            AbsReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PowerInt">
            <summary>
            PowerInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PowerReal">
            <summary>
            PowerReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.RandomInt">
            <summary>
            RandomInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.RandomReal">
            <summary>
            RandomReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MaxInt">
            <summary>
            MaxInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MaxReal">
            <summary>
            MaxReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinInt">
            <summary>
            MinInt.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinReal">
            <summary>
            MinReal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.DeltaDate">
            <summary>
            DeltaDate.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.DeltaTime">
            <summary>
            DeltaTime.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Div">
            <summary>
            Div.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ToExpression">
            <summary>
            ToExpression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ExtractBlockChild">
            <summary>
            ExtractBlockChild.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ExtractArrayMember">
            <summary>
            ExtractArrayMember.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PlusSet">
            <summary>
            PlusSet.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.MinusSet">
            <summary>
            MinusSet.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.EndsWith">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.StartsWith">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Parameter">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.LastRecord">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Eof">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Fill">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Trim">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Replace">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Format">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ResultOK">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ValidationStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Confirm">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.IOResultCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ReadKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ReadKeyName">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.RecordCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.RecordNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.FileName">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ToString">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.GetValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PutValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SearchEx">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.InStringRange">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.GetMeta">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ActiveMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Open">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.UserDefined">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SetRandomSeed">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.IsNumeric">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.IsOffRoute">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.IsUnprocessed">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Inputpath">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Outputpath">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Metasearchpath">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Setupname">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Username">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Sortnumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.UNCName">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.FileExists">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.FolderExists">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.GetFileDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.PathName">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.FormCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Key">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.KeyUnformatted">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.FormNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Run">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Call">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.RunScript">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SearchPartial">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.RegexString">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.RegexPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.RegexReplace">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.ZipFiles">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.UnzipFiles">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SelectFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.SelectFolder">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.DayBatch_Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.DayBatch_Mod">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.DayBatch_Del">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.DayBatch_Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.DayBatch_Create">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.DayBatch_CaseExists">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Specification_AddSurveyDays">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.Specification_RemoveSurveyDays">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.FunctionIdentifier.GetSessionData">
            <summary>
            
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICondition">
            <summary>
            Describes a condition of an IfThenElse or Check definition or statement.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICondition.Expression">
            <summary>
            The expression of the condition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICondition.Involving">
            <summary>
            The expressions describing the involved fields.
            </summary>     
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICondition.Texts">
            <summary>
            The texts from the predefined role Constants.TextRoles.Message for the condition.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICondition.RoleTexts">
            <summary>
            All the predefined and self-defined role texts for the condition.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IExpression2">
            <summary>
            Extends IExpression.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression2.Texts">
            <summary>
            The texts of a (string) constant. Only applicable when the expression structure is ValueConstant and Type.Structure is String.
            Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression2.ElementStructure">
            <summary>
            The element structure for array constants. Only applicable when the expression structure is ValueConstant and Type.Structure is Array.
            Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression2.StringValues">
            <summary>
            The values of an array constant of strings. Only applicable when the expression structure is ValueConstant, Type.Structure is Array and ElementStructure is String. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression2.IntegerValues">
            <summary>
            The values of an array constant of integers. Only applicable when the expression structure is ValueConstant, Type.Structure is Array and ElementStructure is Integer. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression2.RealValues">
            <summary>
            The values of an array constant of reals. Only applicable when the expression structure is ValueConstant, Type.Structure is Array and ElementStructure is Real. Returns null otherwise.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IExpressionCollection">
            <summary>
            Contains items of type IExpression.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpressionCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpressionCollection.Item(System.Int32)">
            <summary>
            Returns an IExpression based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IExpression item.</param>
            <returns>An IExpression.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ExpressionStructure">
            <summary>
            Specifies the structure of an expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ExpressionStructure.FieldStatus">
            <summary>
            Expression is a FieldStatus expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ExpressionStructure.RangeCollection">
            <summary>
            Expression is a RangeCollection expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ExpressionStructure.SpecialAnswer">
            <summary>
            Expression is a SpecialAnswer expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ExpressionStructure.ValueConstant">
            <summary>
            Expression is a Constant expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ExpressionStructure.AppliedFunction">
            <summary>
            Expression is an AppliedFunction expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ExpressionStructure.Name">
            <summary>
            Expression is a Name expression.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IExpression">
            <summary>
            Describes an expression.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.Structure">
            <summary>
            The structure of the expression like Name, AppliedFunction, ValueConstant etc.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.Type">
            <summary>
            The type of the expression. Returns null in case the structure is FieldStatus or SpecialAnswer.
            Also returns null if structure is Name and ObjectInformation.Structure is Group.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.NameExpressionStructure">
            <summary>
            The structure of a name expression like Atomic, ArrayMember, BlockChild etc. Returns null when the structure is different from Name.       
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.ObjectInformation">
            <summary>
            The object information of a name expression like Field, Local, External etc. Returns null when the structure is different from Name.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.Name">
            <summary>
            The name in case the expression structure is Name. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.ArrayIndex">
            <summary>
            Index part if name expression structure is ArrayMember. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.Array">
            <summary>
            Array part if name expression structure is ArrayMember. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.BlockChild">
            <summary>
            Child part if name expression structure is BlockChild. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.BlockParent">
            <summary>
            Parent part if name expression structure is BlockChild. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.External">
            <summary>
            External part if name expression structure is ExternalField. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.ExternalChild">
            <summary>
            Field part if name expression structure is ExternalField. Returns null otherwise.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IExpression.ToString">
            <summary>
            A textual representation of the expression.
            </summary>
            <returns>Expression as string.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.FunctionID">
            <summary>
            Identifier of the function if expression structure is AppliedFunction. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.Arguments">
            <summary>
            The function arguments in case the expression structure is AppliedFunction. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.StringValue">
            <summary>
            The value in case the expression structure is ValueConstant and Type.Structure is String. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.IntegerValue">
            <summary>
            The value in case the expression structure is ValueConstant and Type.Structure is Integer. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.RealValue">
            <summary>
            The value in case the expression structure is ValueConstant and Type.Structure is Real. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.EnumerationValue">
            <summary>
            The value in case the expression structure is ValueConstant and Type.Structure is Enumeration. Returns null otherwise.
            Note: this value is the (numerical) code value of an enumeration category.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.ClassificationValue">
            <summary>
            The value in case the expression structure is ValueConstant and Type.Structure is Classification. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.SetValue">
            <summary>
            The value in case the expression structure is ValueConstant and TypeStructure is Set. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.FieldStatus">
            <summary>
            The status in case the expression structure is FieldStatus. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.SpecialAnswer">
            <summary>
            The special answer value in case the expression structure is SpecialAnswer. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.RangeCollectionKind">
            <summary>
            The kind of range collection in case the expression structure is RangeCollection. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.NumberRanges">
            <summary>
            The ranges in case the expression structure is RangeCollection and the RangeCollectionKind is either Integer or Real. Returns null otherwise. 
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.EnumRanges">
            <summary>
            The ranges in case the expression structure is RangeCollection and the RangeCollectionKind is Enumeration. Returns null otherwise. 
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IExpression.IsGenerated">
            <summary>
            Indicates whether the expression is generated during the creation of the runtime datamodel.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.NameExpressionStructure">
            <summary>
            Describes the structure of a name expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.NameExpressionStructure.Atomic">
            <summary>
            Atomic.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.NameExpressionStructure.ArrayMember">
            <summary>
            ArrayMember.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.NameExpressionStructure.BlockChild">
            <summary>
            BlockChild.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.NameExpressionStructure.ExternalField">
            <summary>
            ExternalField.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.NameExpressionStructure.FieldProperty">
            <summary>
            FieldProperty.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ObjectStructure">
            <summary>
            Describes the object structure of a name expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.Field">
            <summary>
            Field.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.Check">
            <summary>
            Check.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.Local">
            <summary>
            Local.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.Parameter">
            <summary>
            Parameter.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.External">
            <summary>
            External.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.Group">
            <summary>
            Group.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.DataModel">
            <summary>
            DataModel.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.FieldProperty">
            <summary>
            FieldProperty.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.FunctionResult">
            <summary>
            FunctionResult.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ObjectStructure.Constant">
            <summary>
            Constant.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.RangeCollectionKind">
            <summary>
            Describes the kind of a range collection expression.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RangeCollectionKind.Enumeration">
            <summary>
            Enumeration.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RangeCollectionKind.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RangeCollectionKind.Real">
            <summary>
            Real.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.EntryPoint">
            <summary>
            Entry point when using the meta API through COM. Create an instance of this class and use its methods similar to 
            those of the static class MetaManager.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.GetDatamodel(System.String)">
            <summary>
            Retrieves an IDatamodel based on bmix file name.
            </summary>
            <param name="fileName">File name of bmix file.</param>
            <returns>An IDatamodel.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.GetDatamodel(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves an IDatamodel based on bmix file name.
            </summary>
            <param name="fileName">File name of bmix file.</param>
            <param name="datamodelSearchPaths">Search paths for used datamodels in bmix format.</param>
            <param name="librarySearchPaths">Search paths for libraries in blix format.</param>
            <returns>An IDatamodel.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.GetDatamodel(System.Guid)">
            <summary>
            Retrieves an IDatamodel for a survey installed on the local machine.
            </summary>
            <param name="instrumentID">Ihe identification of an installed survey.</param>        
            <returns>An IDatamodel.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID is empty.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.GetDatamodel(System.Guid,System.String)">
            <summary>
            Retrieves an IDatamodel for a survey installed on a server park on the local machine.
            </summary>
            <param name="instrumentID">The identification of an installed survey.</param>
            <param name="serverPark">The server park name.</param>
            <returns>An IDatamodel.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID is empty.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.GetLibrary(System.String)">
            <summary>
            Retrieves an ILibrary based on blix file name.
            </summary>
            <param name="fileName">File name of blix file.</param>
            <returns>An ILibrary.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.WriteMetaEntityToXml(System.String,System.String)">
            <summary>
            Writes the contents of a prepared datamodel (bmix) or prepared library (blix) to an xml file.
            </summary>
            <param name="fileName">File name of bmix or blix file.</param>
            <param name="xmlFileName">File name of xml output file. If this file already exists, then it will get overwritten.</param> 
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.GetDatamodel(System.Guid,System.String,System.String,System.Int32,System.String)">
            <summary>
            Retrieves an IDatamodel for a survey installed on a remote server.
            </summary>
            <param name="instrumentID">The identification of an installed survey.</param>
            <param name="serverPark">The server park name.</param>
            <param name="serverName">The name of the remote server.</param>
            <param name="port">The communication port for the instrument definition service. This is the internal communication port. Its default value is 8032.</param>
            <param name="binding">The binding for the instrument definition service. The default is null, which means http binding.</param>
            <returns>An IDatamodel.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID, serverPark or serverName is empty.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.RenewInstrumentID(System.String)">
            <summary>
            Replaces the instrumentID of a prepared datamodel by a generated Guid (in the specified meta file)
            </summary>
            <param name="datamodelFileName">filename of the prepared datamodel</param>
            <returns>the new instrumentID</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.SetInstrumentID(System.String,System.Guid)">
            <summary>
            Replaces the instrumentID of a prepared datamodel by some specified Guid.
            </summary>
            <param name="datamodelFileName">Filename of the prepared datamodel.</param>
            <param name="instrumentID">The new instrumentID.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.GetExternalDatamodel(System.Guid,System.String,System.String)">
            <summary>
            Retrieves an IDatamodel for a external of a survey installed on the local machine.
            </summary>
            <param name="instrumentID">The identification of an installed survey.</param>
            <param name="serverPark">The server park name.</param>
            <param name="localMetaFileName">The local filename of the datamodel, p.e. States/states.bmix</param>
            <returns>An IDatamodel.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.EntryPoint.GetExternalDatamodel(System.Guid,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Retrieves an IDatamodel for a external of a survey installed on a remote server.
            </summary>
            <param name="instrumentID">The identification of an installed survey.</param>
            <param name="serverPark">The server park name.</param>
            <param name="serverName">The name of the remote server.</param>
            <param name="port">The communication port for the instrument definition service. This is the internal communication port. Its default value is 8032.</param>
            <param name="localMetaFileName">The local filename of the datamodel, p.e. States/states.bmix</param>
            <param name="binding">The binding for the instrument definition service. The default is null, which means http binding.</param>
            <returns>An IDatamodel.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDatamodel">
            <summary>
            Describes a Blaise datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.Datamodels">
            <summary>
            The data models used by externals.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.Libraries">
            <summary>
            The used libraries.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.Keys">
            <summary>
            The defined keys for this datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.Parallels">
            <summary>
            The defined parallels for this datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.Procedures">
            <summary>
            The user defined procedures, that do not contain (aux)fields or checks. The procedures 
            originate from the entire datamodel, and are identified by their hierarchical name.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.DataChecksum">
            <summary>
            Checksum for stored data. 
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.RulesChecksum">
            <summary>
            Checksum for validated session data. 
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.DataEntrySettings">
            <summary>
            The data entry settings that are defined for this survey.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.InstrumentId">
            <summary>
            The identification of the instrument.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.Roles">
            <summary>
            The user defined roles for this datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.FieldProperties">
            <summary>
            Additional properties that apply to ALL data fields.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel.RoleTexts">
            <summary>
            The defined role texts belonging to the name of the datamodel.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDatamodel2">
            <summary>
            Extended interface for multi mode purposes. Extends IDatamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel2.SpecialAnswers">
            <summary>
            User defined special answers. Contains all the special answers, regardless of the mode behaviour.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel2.ModeBehaviour">
            <summary>
            Indicates whether this datamodel defines modes.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel2.Modes">
            <summary>
            The modes defined by this datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel2.SpecialAnswersDictionary">
            <summary>
            Returns a dictionary for the mode-specific special answers. Only relevant in case mode behaviour is multi mode. Returns null otherwise.
            Note that this may also contain system generated IModeSpecialAnswerSettingsCollection items.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDatamodel2.GetModeDatamodel(System.String)">
            <summary>
            Returns mode-specific instance of this datamodel: properties like SpecialAnswers and RoleTexts are defined according to the specified mode.
            Returns this datamodel in case mode behaviour is different from multi mode and the mode parameter is null or string.Empty.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If mode is invalid, or this datamodel does not define modes.</exception>
            <param name="mode">Name of the mode.</param>
            <returns>An IDatamodel2 representing a mode-specific instance of this datamodel.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDatamodel3">
            <summary>
            Extends IDatamodel2. Offers access to mode dependent route paths.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDatamodel4">
            <summary>
            Extends IDatamodel3.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel4.Constants">
            <summary>
            The constants. Note that this collection will also contain the constants defined in blocks, procedures and/or groups.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDatamodel5">
            <summary>
            Extends IDatamodel4.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDatamodel5.CariSettings">
            <summary>
            The CARI settings. Contains 0 items if survey does not support CARI.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDatamodel6">
            <summary>
            Extends IDatamodel5.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDatamodel6.GetCompareResult(StatNeth.Blaise.API.Meta.IDatamodel,StatNeth.Blaise.API.Meta.IBlockCompareInfoCollection@)">
            <summary>
            Compares this datamodel with a different one. Can detect if this model has 'harmless changes' compared to an older one.
            </summary>
            <param name="oldModel">Possibly older version of this datamodel.</param>        
            <param name="blockCompareInfo">Collection with information about changes/extensions per block.</param>
            <returns>An ICompareResult.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDatamodel6.GetCompareResult(StatNeth.Blaise.API.Meta.IDatamodel)">
            <summary>
            Compares this datamodel with a different one. Can detect if this model has 'harmless changes' compared to an older one.
            </summary>
            <param name="oldModel">Possibly older version of this datamodel.</param>
            <returns>An ICompareResult.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDefinitionScope">
            <summary>
            Exposes the definitions of a datamodel, block, procedure or group.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDefinitionScope.HierarchicalName">
            <summary>
            The hierarchical name. Returns string.Empty for the datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDefinitionScope.Attributes">
            <summary>
            Defined attributes for the data fields.
            </summary>
            <exception cref="T:System.InvalidOperationException">If used for a multi mode datamodel, block, procedure or group. In case of datamodel, use the property IDatamodel2.SpecialAnswersDictionary.</exception>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDefinitionScope.Fields">
            <summary>
            The data and auxiliary fields. Does not contain fields within groups. Use Groups[index].Fields to access fields in groups.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDefinitionScope.Locals">
            <summary>
            The locals.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDefinitionScope.Parameters">
            <summary>
            The parameters of a block or procedure. Contains generated parameters also. Returns null for the datamodel and for groups.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDefinitionScope.Externals">
            <summary>
            The externals.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDefinitionScope.Checks">
            <summary>
            The checks.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDefinitionScope.Groups">
            <summary>
            The groups.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDefinitionScope.GetField(System.String)">
            <summary>
            Returns an IFieldInformation based on names like 'Household.Person[1].Sex' or 'Household.Person.Sex'. Note that the use of 
            groups within the name is not allowed. So not: 'blockfield.groupname.fieldname' but: 'blockfield.fieldname'.
            Throws an argument out of range exception if field information not found.
            </summary>
            <param name="fullName">The name leading to an IFieldInformation.</param>
            <returns>An IFieldInformation.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDefinitionScope.GetCheck(System.String)">
            <summary>
            Returns an ICheckInformation based on names like 'check_1_' or 'blockfield1.blockfield2.check_1_'.
            Throws an argument out of range exception if check information not found.
            </summary>
            <param name="fullName">The fully qualified check name.</param>
            <returns>An ICheckInformation.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDefinitionScope.GetGroup(System.String)">
            <summary>
            Returns an IGroupDefinition based on names like 'groupname' or 'blockfield1.blockfield2.groupname'.
            The use of a nested name like 'groupname1.groupname2' is not allowed. Take the name of the most nested group (i.e. 'groupname2') in this case.
            Throws an argument out of range exception if group definition not found.
            </summary>
            <param name="fullName">The fully qualified group name.</param>
            <returns>An IGroupDefinition.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDefinitionScope.Statements">
            <summary>
            The statements, including generated statements.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDefinitionScope2">
            <summary>
            Extends IDefinitionScope.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDefinitionScope2.FieldExists(System.String)">
            <summary>
            Does a field with the given field name exist?
            </summary>
            <param name="fullName">The fully qualified field name.</param>
            <returns>True if exists, False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDefinitionScope2.GroupExists(System.String)">
            <summary>
            Does a group with the given group name exist?
            Note that using a name like 'groupname1.groupname2' is not allowed. Take the name of the most nested group (i.e. 'groupname2') in this case.
            </summary>
            <param name="fullName">The fully qualified group name.</param>
            <returns>True if exists, False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IDefinitionScope2.CheckExists(System.String)">
            <summary>
            Does a check with the given check name exist?
            Examples of a fully qualified check name are: 'check_1_' or 'blockfield1.blockfield2.check_1_'.
            </summary>
            <param name="fullName">The fully qualified check name.</param>
            <returns>True if exists, False otherwise.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IDefinitionScopeOwner">
            <summary>
            Offers access to the scope of an object.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IDefinitionScopeOwner.Scope">
            <summary>
            The surrounding datamodel, block, procedure or group as IDefinitionScope.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ILibrary">
            <summary>
            Describes a Blaise library.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILibrary.TypeChecksum">
            <summary>
            Checksum of types in library.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILibrary.DataChecksum">
            <summary>
            Checksum of types used for stored data.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ILibrary2">
            <summary>
            Extends ILibrary.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ILibrary2.Roles">
            <summary>
            The user defined roles for this library.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IMetaEntity">
            <summary>
            Describes a meta entity.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMetaEntity.Name">
            <summary>
            The name of the datamodel or library.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMetaEntity.FileName">
            <summary>
            The file name where the meta entity was loaded from.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMetaEntity.EntityStructure">
            <summary>
            Is the meta entity a datamodel or a library?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMetaEntity.Languages">
            <summary>
            The defined languages for the meta entity. If there are no defined languages, this collection will contain
            one default ILanguage item with name = string.Empty.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMetaEntity.Texts">
            <summary>
            The defined texts for the role Constants.TextRoles.Title. Corresponds with the texts belonging to the name of a datamodel or library.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMetaEntity.Types">
            <summary>
            Exposes all the object types that originate from THIS meta entity. So types defined in libraries are not included!
            These are grouped by type structure (real, string, enumeration, ..).
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IMetaEntityOwner">
            <summary>
            Offers access to the owning meta entity.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMetaEntityOwner.EntityStructure">
            <summary>
            Is the owner a datamodel or a library?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMetaEntityOwner.DatamodelOwner">
            <summary>
            The owner as datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMetaEntityOwner.LibraryOwner">
            <summary>
            The owner as library.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaEntity.FindType(StatNeth.Blaise.API.Meta.TypeStructure,System.String,System.Boolean)">
            <summary>
            Returns null if _types does not contain items for typeStructure and/or item with typeName could not be found.
            </summary>
            <param name="typeStructure"></param>
            <param name="typeName"></param>
            <param name="allowCreate"></param>
            <returns></returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.MetaManager">
            <summary>
            The entry point to Blaise 5 meta information.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetDatamodel(System.String)">
            <summary>
            Retrieves an IDatamodel based on bmix file name.
            </summary>
            <param name="fileName">File name of bmix file.</param>
            <returns>An IDatamodel.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetDatamodel(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves an IDatamodel based on bmix file name.
            </summary>
            <param name="fileName">File name of bmix file.</param>
            <param name="datamodelSearchPaths">Search paths for used datamodels in bmix format.</param>
            <param name="librarySearchPaths">Search paths for libraries in blix format.</param>
            <returns>An IDatamodel.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetDatamodel(System.Guid)">
            <summary>
            Retrieves an IDatamodel for a survey installed on the local machine.
            </summary>
            <param name="instrumentID">Ihe identification of an installed survey.</param>        
            <returns>An IDatamodel.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID is empty.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetDatamodel(System.Guid,System.String)">
            <summary>
            Retrieves an IDatamodel for a survey installed on a server park on the local machine.
            </summary>
            <param name="instrumentID">The identification of an installed survey.</param>
            <param name="serverPark">The server park name.</param>
            <returns>An IDatamodel.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID or serverPark is empty.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetLibrary(System.String)">
            <summary>
            Retrieves an ILibrary based on blix file name.
            </summary>
            <param name="fileName">File name of blix file.</param>
            <returns>An ILibrary.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.WriteMetaEntityToXml(System.String,System.String)">
            <summary>
            Writes the contents of a prepared datamodel (bmix) or prepared library (blix) to an xml file.
            </summary>
            <param name="fileName">File name of bmix or blix file.</param>
            <param name="xmlFileName">File name of xml output file. If this file already exists, then it will get overwritten.</param> 
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetDatamodel(System.Guid,System.String,System.String,System.Int32,System.String)">
            <summary>
            Retrieves an IDatamodel for a survey installed on a remote server.
            </summary>
            <param name="instrumentID">The identification of an installed survey.</param>
            <param name="serverPark">The server park name.</param>
            <param name="serverName">The name of the remote server.</param>
            <param name="port">The communication port for the instrument definition service. This is the internal communication port. Its default value is 8032.</param>
            <param name="binding">The binding for the instrument definition service. The default is null, which means http binding.</param>
            <returns>An IDatamodel.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID, serverPark or serverName is empty.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.RenewInstrumentID(System.String)">
            <summary>
            Replaces the instrumentID of a prepared datamodel by a generated Guid (in the specified meta file)
            </summary>
            <param name="datamodelFileName">filename of the prepared datamodel</param>
            <returns>the new instrumentID</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.SetInstrumentID(System.String,System.Guid)">
            <summary>
            Replaces the instrumentID of a prepared datamodel by some specified Guid.
            </summary>
            <param name="datamodelFileName">Filename of the prepared datamodel.</param>
            <param name="instrumentID">The new instrumentID.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetExternalDatamodel(System.Guid,System.String,System.String)">
            <summary>
             Retrieves an IDatamodel for a external of a survey installed on the local machine.
            </summary>
            <param name="instrumentID">The identification of an installed survey.</param>
            <param name="serverPark">The server park name.</param>
            <param name="localMetaFileName">The local filename of the datamodel, p.e. States/states.bmix</param>
            <returns>An IDatamodel.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID, serverPark or localMetaFileName is empty.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetExternalDatamodel(System.Guid,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Retrieves an IDatamodel for a external of a survey installed on a remote server.
            </summary>
            <param name="instrumentID">The identification of an installed survey.</param>
            <param name="serverPark">The server park name.</param>
            <param name="serverName">The name of the remote server.</param>
            <param name="port">The communication port for the instrument definition service. This is the internal communication port. Its default value is 8032.</param>
            <param name="localMetaFileName">The local filename of the datamodel, p.e. States/states.bmix</param>
            <param name="binding">The binding for the instrument definition service. The default is null, which means http binding.</param>
            <returns>An IDatamodel.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID, serverPark, serverName or localMetaFileName is empty.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetDatamodel(System.String,System.String)">
            <summary>
            Retrieves an IDatamodel for an instrument installed on the local machine.
            Returns null if not found.
            </summary>
            <param name="instrumentName">The name of the instrument.</param>
            <param name="serverPark">The server park name.</param>
            <returns>An IDatamodel or null.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentName or serverPark is empty.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetDatamodelFromInstrumentId(System.String,System.String)">
            <summary>
            Retrieves an IDatamodel for an instrument installed on the local machine. It uses an instrument identification (guid) as string.
            </summary>
            <param name="instrumentID">The instrument identification (guid) as string.</param>
            <param name="serverPark">The server park name.</param>
            <returns>An IDatamodel.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID or serverPark is empty.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.UpdateHarmlessExtension(StatNeth.Blaise.API.Meta.IDatamodel,System.String,System.String,System.String)">
            <summary>
            Checks whether the new DataModel is a harmless extension of the old model. Updates the bmix if true 
            </summary>
            <param name="oldDatamodel">The old version of the datamodel</param>
            <param name="newDatamodelFileName">File name of the new datamodel</param>
            <param name="dataModelSearchPaths">Search paths for finding datamodels that are needed with the new datamodel</param>
            <param name="librarySearchPaths">Search paths for finding libraries that are needed with the new datamodel</param>
            <returns></returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.MetaManager.GetDatamodelEx(StatNeth.Blaise.Meta.Runtime.IPreparedDatamodel)">
            <summary>
            For internal use only.
            </summary>
            <param name="datamodel">The datamodel</param>
            <returns>An IDatamodel</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ModeBehaviour">
            <summary>
            Specifies whether the datamodel is multi mode or not.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ModeBehaviour.NoModes">
            <summary>
            Normal datamodel without modes.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ModeBehaviour.MultiMode">
            <summary>
            Multi mode datamodel.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ModeBehaviour.ModeInstance">
            <summary>
            Mode specific instance of a multi mode datamodel.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettings">
            <summary>
            Describes the special answer settings defined for a mode.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettings.Mode">
            <summary>
            The mode for which the settings are specified. If empty, the settings apply to all modes.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollection">
            <summary>
            Contains items of type IModeSpecialAnswerSettings.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollection.Item(System.Int32)">
            <summary>
            Returns an IModeSpecialAnswerSettings item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Index in the collection.</param>
            <returns>An IModeSpecialAnswerSettings.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollection.IndexOf(System.String)">
            <summary>
            Returns index of an IModeSpecialAnswerSettings by name.
            </summary>
            <param name="mode">Name of the mode.</param>
            <returns>The index. Returns -1 if not found.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollection.GetItem(System.String)">
            <summary>
            Returns an IModeSpecialAnswerSettings item based on mode name.
            If the collection is not mode specific it returns the only item.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="mode">Name of the mode to look for.</param>
            <returns>An IModeSpecialAnswerSettings.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollection.IsModeSpecific">
            <summary>
            Returns true if collection is not empty and all items have a non-empty mode.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollectionDictionary">
            <summary>
            Dictionary of IModeSpecialAnswerSettingsCollection items, using the name of the special answer set as key.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollectionDictionary.Keys">
            <summary>
            Keys of the dictionary.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollectionDictionary.Values">
            <summary>
            All items of the dictionary.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollectionDictionary.Count">
            <summary>
            Number of items in the dictionary.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollectionDictionary.ContainsKey(System.String)">
            <summary>
            Contains item with specified name of special answer set?
            </summary>
            <param name="name">Name of special answer set to look for.</param>
            <returns>True if item is contained. False otherwise.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeSpecialAnswerSettingsCollectionDictionary.Item(System.String)">
            <summary>
            Returns an IModeSpecialAnswerSettingsCollection item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="name">Name of special answer set.</param>
            <returns>An IModeSpecialAnswerSettingsCollection.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IModeRoutePaths">
            <summary>
            Offers access to the route paths per mode.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeRoutePaths.Mode">
            <summary>
            The mode for which the route paths are defined.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeRoutePaths.RoutePaths">
            <summary>
            Collection of IRoutePath items.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IModeRoutePathsCollection">
            <summary>
            Contains items of type IModeRoutePaths.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeRoutePathsCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeRoutePathsCollection.Item(System.Int32)">
            <summary>
            Returns an IModeRoutePaths based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IModeRoutePaths item.</param>
            <returns>An IModeRoutePaths.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IModeRoutePathsCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified mode name?
            </summary>
            <param name="mode">The mode of the IModeRoutePaths item to look for.</param>
            <returns>True if the IModeRoutePaths is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IModeRoutePathsCollection.GetItem(System.String)">
            <summary>
            Returns an IModeRoutePaths item based on mode name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="mode">The name of the IModeRoutePaths item.</param>
            <returns>An IModeRoutePaths.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IMultiModeRoutePathScope">
            <summary>
            Describes a scope for a collection of route paths per mode.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IMultiModeRoutePathScope.ModeRoutePaths">
            <summary>
            Collection of route paths per mode.
            Returns route paths for the statements (i.e. IF mode THEN ... ELSE ...) defined in a datamodel, block or group.
            Only relevant in case mode behaviour of the datamodel is multi mode. Returns null otherwise.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IRoutePath">
            <summary>
            Describes a route path for a data or auxiliary field.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoutePath.FieldName">
            <summary>
            An expression representing a local field name.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoutePath.IsAskable">
            <summary>
            Is there a route statement with method ASK for this field?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoutePath.Previous">
            <summary>
            Returns the previous item in its collection parent.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoutePath.Next">
            <summary>
            Returns the next item in its collection parent.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IRoutePath2">
            <summary>
            Extends IRoutePath.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoutePath2.UsedMethods">
            <summary>
            Applied route methods for this route item.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IRoutePathCollection">
            <summary>
            Contains items of type IRoutePath.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoutePathCollection.Count">
            <summary>
            The number of IRoutePath items.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoutePathCollection.Item(System.Int32)">
            <summary>
            Returns an IRoutePath item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The index of the IRoutePath item.</param>
            <returns>An IRoutePath.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IRoutePathCollection.GetPathOf(System.String)">
            <summary>
            Returns the IRoutePath for a local field name. Can return null.
            </summary>
            <param name="localFieldName">The local name of the field to search for.</param>
            <returns>An IRoutePath if found, null otherwise.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IRoutePathScope">
            <summary>
            Describes a scope for an IRoutePathCollection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoutePathScope.RoutePaths">
            <summary>
            Determines the order in which the fields are displayed during an interview. Note that possible block or group 
            fields are contained as one item. Also note, that if there is a rules section and a field is not mentioned in 
            the rules (it gets an implicit keep) then it will not appear in the RoutePaths.
            </summary>        
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.RouteMethodFilter">
            <summary>
            Describes possible route methods.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteMethodFilter.Ask">
            <summary>
            Ask.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteMethodFilter.Show">
            <summary>
            Show.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteMethodFilter.Classify">
            <summary>
            Classify.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteMethodFilter.Lookup">
            <summary>
            Lookup.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IKeyAssignment">
            <summary>
            Describes a key assignment to be used by a lookup statement.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IKeyAssignment.KeyName">
            <summary>
            The name of the key as defined in the datamodel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IKeyAssignment.StartValueFields">
            <summary>
            The collection with start values for the fields that are part of KeyName.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IKeyAssignmentCollection">
            <summary>
            Contains items of type IKeyAssignment.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IKeyAssignmentCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IKeyAssignmentCollection.Item(System.Int32)">
            <summary>
            Returns an IKeyAssignment based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IKeyAssignment item.</param>
            <returns>An IKeyAssignment.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IKeyAssignmentCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified key name?
            </summary>
            <param name="keyName">Name of key to look for.</param>
            <returns>True if key name is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IKeyAssignmentCollection.GetItem(System.String)">
            <summary>
            Returns an IKeyAssignment item based on key name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="keyName">The key name.</param>
            <returns>An IKeyAssignment.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IStatement">
            <summary>
            Describes a statement in the rules.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.Structure">
            <summary>
            The structure of the statement like Route, Check, Assignment etc.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.IsGenerated">
            <summary>
            Is the statement generated by Blaise?
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.Check">
            <summary>
            The local name expression that identifies a check. Only relevant when the structure is Check. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.RouteMethod">
            <summary>
            The route method that should be applied. Only relevant when the structure is Route or Lookup. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.MainField">
            <summary>
            The local name expression of the field that will be routed. Only relevant when the structure is Route or Lookup. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.ParameterValues">
            <summary>
            The parameter values when a block is put on the route, or a user defined procedure is called. Only relevant when the structure is Route or ProcedureCall. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.LookupReturnField">
            <summary>
            The name expression for the field returned by a lookup statement. Only relevant when the structure is Lookup. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.LookupKeyAssignments">
            <summary>
            The keys and start values for a lookup statement. Only relevant when the structure is Lookup. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.LeftHandSide">
            <summary>
            The left hand side field or variable of an assignment. Only relevant when the structure is Assignment. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.RightHandSide">
            <summary>
            The right hand side value of an assignment. Only relevant when the structure is Assignment. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.LoopBody">
            <summary>
            The statements in the body of a for loop. Only relevant when the structure is ForLoop. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.LoopVariable">
            <summary>
            The loop variable of a for loop. Only relevant when the structure is ForLoop. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.LoopLowerBound">
            <summary>
            Lower bound of the index variable of a for loop. Only relevant when the structure is ForLoop. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.LoopUpperBound">
            <summary>
            Upper bound of the index variable of a for loop. Only relevant when the structure is ForLoop. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.Condition">
            <summary>
            The If condition of an IfThenElse statement. Only relevant when the structure is IfThenElse. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.ThenBranch">
            <summary>
            The Then branch of an IfThenElse statement. Only relevant when the structure is IfThenElse. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.ElseBranch">
            <summary>
            The Else branch of an IfThenElse statement. Only relevant when the structure is IfThenElse, but can be null. Returns null for different structures.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.ElseBranchTexts">
            <summary>
            The texts with the role Constants.TextRoles.Message for an Else branch of an IfThenElse statement. 
            Only relevant when the structure is IfThenElse. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.ElseBranchRoleTexts">
            <summary>
            The role texts for an Else branch of an IfThenElse statement. Only relevant when the structure is IfThenElse. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.IsElseIf">
            <summary>
            Indicates whether an IfThenElse statement has an ElseIf part. Only relevant when the structure is IfThenElse. Returns false otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.PipingTargetAction">
            <summary>
            The (route) statement that receives the result of the source action of a piping statement. Only relevant when the structure is Piping. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.PipingSourceAction">
            <summary>
            The statement, which acts as the source of a piping statement. For example a lookup or check. Only relevant when the structure is Piping. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.ProcedureNameStructure">
            <summary>
            The structure (Datamodel or System) of a procedure call. Only relevant when the structure is ProcedureCall. Returns null otherwise.
            Use this property to distinguish between user defined (Datamodel) and system procedures.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.ProcedureName">
            <summary>
            The hierarchical name in case of a user defined procedure (ProcedureNameStructure is Datamodel). Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement.ProcedureIdentifier">
            <summary>
            Identifies a system procedure (ProcedureNameStructure is System). Returns null otherwise.
            System procedures are for example SIGNAL, CHECK or READ.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IStatement.ToString">
            <summary>
            A textual representation of the statement. Note that the result for an IfThenElse and/or ForLoop statement does not include the body statements.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IStatement2">
            <summary>
            Extends IStatement.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatement2.AllowClearLookupRecord">
            <summary>
            Is it allowed to unselect lookup record?. Only relevant when the structure is Lookup. Returns false otherwise.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IStatementCollection">
            <summary>
            Contains items of type IStatement.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatementCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IStatementCollection.Item(System.Int32)">
            <summary>
            Returns an IStatement based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IStatement item.</param>
            <returns>An IStatement.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ProcedureIdentifier">
            <summary>
            Describes the system procedures.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureIdentifier.Check">
            <summary>
            Check.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureIdentifier.Signal">
            <summary>
            Signal.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureIdentifier.SetLanguage">
            <summary>
            SetLanguage.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureIdentifier.Open">
            <summary>
            Open.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureIdentifier.Read">
            <summary>
            Read.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureIdentifier.Exchange">
            <summary>
            Exchange.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureIdentifier.Delete">
            <summary>
            Delete.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureIdentifier.Insert">
            <summary>
            Insert.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ProcedureNameStructure">
            <summary>
            Describes the structure of a procedure call.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureNameStructure.System">
            <summary>
            A procedure call like CHECK, SIGNAL etc.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ProcedureNameStructure.Datamodel">
            <summary>
            A user defined procedure call.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.RouteMethod">
            <summary>
            The methods to use with a route statement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteMethod.Ask">
            <summary>
            Ask.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteMethod.Show">
            <summary>
            Show.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteMethod.Keep">
            <summary>
            Keep.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteMethod.Classify">
            <summary>
            Classify.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RouteMethod.Lookup">
            <summary>
            Lookup.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.StatementStructure">
            <summary>
            Describes the structure of a statement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.StatementStructure.Route">
            <summary>
            Route statement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.StatementStructure.Check">
            <summary>
            Check statement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.StatementStructure.Assignment">
            <summary>
            Assignment statement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.StatementStructure.IfThenElse">
            <summary>
            If Then Else statement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.StatementStructure.ForLoop">
            <summary>
            For Loop statement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.StatementStructure.Piping">
            <summary>
            Piping statement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.StatementStructure.ProcedureCall">
            <summary>
            Procedure call statement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.StatementStructure.Lookup">
            <summary>
            Lookup statement.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICategoryTexts">
            <summary>
            Contains all textual information for a category.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategoryTexts.Code">
            <summary>
            The category code.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategoryTexts.Name">
            <summary>
            The category name.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategoryTexts.Texts">
            <summary>
            The texts defined for this category.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategoryTexts.RoleTexts">
            <summary>
            The role texts defined for this category.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategoryTexts.ModeRoleTexts">
            <summary>
            The roletexts per mode for this category.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICategoryTextsCollection">
            <summary>
            Contains items of type ICategoryTexts.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategoryTextsCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategoryTextsCollection.Item(System.Int32)">
            <summary>
            Returns an ICategoryTexts based on index.
            </summary>
            <param name="index">Numerical index of an ICategoryTexts item.</param>
            <returns>An ICategoryTexts.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICategoryTextsCollection.IndexOf(System.String)">
            <summary>
            Returns numerical index of an ICategoryTexts item based on the category name.
            Returns -1 if not found.
            </summary>
            <param name="name">The name of the category.</param>
            <returns>The numerical index.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICategoryTextsCollection.IndexOf(System.Int32)">
            <summary>
            Returns numerical index of an ICategoryTexts item based on the category code.
            Returns -1 if not found.
            </summary>
            <param name="code">The code of the category.</param>
            <returns>The numerical index.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.TextFormat">
            <summary>
            Possible text formats.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TextFormat.Standard">
            <summary>
            Texts will be formatted like 'first part ' + fieldName + ' second part'
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TextFormat.SourceCode">
            <summary>
            Texts will be formatted like "first part ^fieldName second part"
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IHasModeRoleTexts">
            <summary>
            Interface that offers mode role texts, if applicable.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IHasModeRoleTexts.ModeRoleTexts">
            <summary>
            Mode specific defined role texts. Will return 0 items if the datamodel has ModeBehaviour NoModes or ModeInstance.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IModeRoleTexts">
            <summary>
            Role Texts for a Mode
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeRoleTexts.Mode">
            <summary>
            The Mode for which the RoleTexts are defined
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeRoleTexts.RoleTexts">
            <summary>
            Collection of RoleText items
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IModeRoleTextsCollection">
            <summary>
            Collection of Role Texts per Mode. Contains items of type IModeRoleTexts.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeRoleTextsCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IModeRoleTextsCollection.Item(System.Int32)">
            <summary>
            Returns an IModeRoleTexts based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IModeRoleTexts item.</param>
            <returns>An IModeRoleTexts.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IModeRoleTextsCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified mode?
            </summary>
            <param name="mode">The mode to look for.</param>
            <returns>True if mode is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IModeRoleTextsCollection.GetItem(System.String)">
            <summary>
            Returns an IModeRoleTexts item based on its mode.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="mode">The mode to look for.</param>
            <returns>An IModeRoleTexts.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IRole">
            <summary>
            Describes a user defined text role.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRole.Name">
            <summary>
            The name of the role.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRole.Description">
            <summary>
            The description of the role.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IRoleCollection">
            <summary>
            Contains items of type IRole.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoleCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoleCollection.Item(System.Int32)">
            <summary>
            Returns an IRole item based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an IRole item.</param>
            <returns>An IRole.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IRoleCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified role name?
            </summary>
            <param name="roleName">Name of the role to look for.</param>
            <returns>True if role is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IRoleCollection.GetItem(System.String)">
            <summary>
            Returns an IRole item based on its role name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="roleName">The name of the role.</param>
            <returns>An IRole.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IRoleTexts">
            <summary>
            Offers the texts for one role.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoleTexts.Role">
            <summary>
            The role of the texts. Typical values are 'Question' or 'Description'.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoleTexts.Texts">
            <summary>
            Collection of Text items. One per language for which texts are defined.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IRoleTextsCollection">
            <summary>
            Collection of IRoleTexts items.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoleTextsCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IRoleTextsCollection.Item(System.Int32)">
            <summary>
            Returns an IRoleTexts based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an IRoleTexts item.</param>
            <returns>An IRoleTexts.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IRoleTextsCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified text role?
            </summary>
            <param name="role">The text role to look for.</param>
            <returns>True if role is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IRoleTextsCollection.GetItem(System.String)">
            <summary>
            Returns an IRoleTexts item based on its role.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="role">The role to look for. If no role provided, then the Question role will be assumed.</param>
            <returns>An IRoleTexts.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IText">
            <summary>
            Describes the defined text for some language.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IText.Language">
            <summary>
            The name of the language. Is string.Empty in case no languages are defined.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IText.TextType">
            <summary>
            Simple or Composed.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IText.Text">
            <summary>
            The value of the text in case of Simple text type. Is string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IText.TextElements">
            <summary>
            The elements in case of Composed text type. Is null otherwise.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IText.ToString">
            <summary>
            The representation of the text as string. Example: 'constant part' + Name + ' other constant part'.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IText2">
            <summary>
            Extends IText.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IText2.ToFormattedString(StatNeth.Blaise.API.Meta.TextFormat)">
            <summary>
            Returns the text as formatted string. 
            Using TextFormat.Standard returns the same result as IText.ToString().
            Using TextFormat.SourceCode returns the text as how it was defined.
            </summary>
            <param name="format">The format to use.</param>
            <returns>A string.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ITextCollection">
            <summary>
            Contains items of type IText.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ITextCollection.Count">
            <summary>
            The number of IText items.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ITextCollection.Item(System.Int32)">
            <summary>
            Returns IText item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an IText item.</param>
            <returns>An IText.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ITextCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified language?
            </summary>
            <param name="language">The language name.</param>
            <returns>True if language is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ITextCollection.GetItem(System.String)">
            <summary>
            Returns an IText item based on language name. If there are no languages defined in the datamodel you can use string.Empty to retrieve the default language.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="language">The language name.</param>
            <returns>An IText.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ITextElement">
            <summary>
            Describes an element of a Blaise text: constant or variable.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ITextElement.Structure">
            <summary>
            The structure of the text element: either Constant or Variable.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ITextElement.Text">
            <summary>
            The textual value in case the structure is Constant. Is string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ITextElement.Name">
            <summary>
            The name of the fill variable in case the structure is Variable. Is null otherwise.
            This is either an atomic, composed or array expression, or an expression representing a set element.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ITextElement2">
            <summary>
            Extends ITextElement.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ITextElement2.IsRichText">
            <summary>
            Will the value of the fill variable be interpreted as rich text?. 
            Only applicable in case the structure is Variable. Returns null otherwise.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ITextElementCollection">
            <summary>
            Collection of ITextElement items.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ITextElementCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ITextElementCollection.Item(System.Int32)">
            <summary>
            Returns an ITextElement based on index.
            Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">The numerical index of an ITextElement item.</param>
            <returns>An ITextElement.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.TextElementStructure">
            <summary>
            Describes the structure of ITextElement.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TextElementStructure.Constant">
            <summary>
            Text element is a constant.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TextElementStructure.Variable">
            <summary>
            Text element is a variable (fill).
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.TextType">
            <summary>
            Describes the possible types of an IText.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TextType.Simple">
            <summary>
            Text value consists out of one element, which is a constant.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TextType.Composed">
            <summary>
            Text value contains variable elements (fills).
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.BlobFilter">
            <summary>
            The filters that can be used by a Blob type.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.BlobFilter.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.BlobFilter.Image">
            <summary>
            Image.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.BlobFilter.Audio">
            <summary>
            Audio.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.BlobFilter.Video">
            <summary>
            Video.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.BlobSizeUnit">
            <summary>
            The unit of Blob size.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.BlobSizeUnit.KiloByte">
            <summary>
            Unit is KiloByte.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.BlobSizeUnit.MegaByte">
            <summary>
            Unit is MegaByte.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ClassificationDepthKind">
            <summary>
            Denotes the depth or precision for a classification code.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ClassificationDepthKind.Any">
            <summary>
            No restrictions apply.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ClassificationDepthKind.Minimum">
            <summary>
            A minimum level of precision indicated by IClassificationType.MinimumLevel is required.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ClassificationDepthKind.Complete">
            <summary>
            Only end nodes are allowed.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ClassificationItemDataType">
            <summary>
            Describes the data type of a classification item value.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ClassificationItemDataType.Digit">
            <summary>
            Only digits.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ClassificationItemDataType.Letter">
            <summary>
            Only letters.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.ClassificationItemDataType.DigitOrLetter">
            <summary>
            Digits or letters.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.EnumRangeKind">
            <summary>
            The kind of an enum range.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.EnumRangeKind.Simple">
            <summary>
            Range has the form of an enumeration value.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.EnumRangeKind.MinMaxRange">
            <summary>
            Range is limited by both a minimum and a maximum enumeration value.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IBlobSize">
            <summary>
            Describes the Blob size.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlobSize.Value">
            <summary>
            The size value.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlobSize.Unit">
            <summary>
            The unit used.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IBlobType">
            <summary>
            Describes a Blob type.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlobType.MaxSize">
            <summary>
            The maximum size of the blob.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlobType.FileTypeFilter">
            <summary>
            The file type filter.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IBlobType.ExtensionFilter">
            <summary>
            The file extension filters. 
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IClassificationItem">
            <summary>
            Describes an item in a classification tree.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationItem.Name">
            <summary>
            The local name of the item.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationItem.LocalCode">
            <summary>
            The local code of this item.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationItem.Code">
            <summary>
            The full code of the item.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationItem.Texts">
            <summary>
            The texts of the item.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationItem.Items">
            <summary>
            The child items (can be an empty collection).
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IClassificationItemCollection">
            <summary>
            Contains items of type IClassificationItem.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationItemCollection.Count">
            <summary>
            The number of items.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationItemCollection.Item(System.Int32)">
            <summary>
            Returns an IClassificationItem item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an IClassificationItem item.</param>
            <returns>An IClassificationItem.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IClassificationItemCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified local item name?
            </summary>
            <param name="localName">Local name of the item to look for.</param>
            <returns>True if item is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IClassificationItemCollection.GetItem(System.String)">
            <summary>
            Returns an IClassificationItem item based on local item name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="localName">The local item name.</param>
            <returns>An IClassificationItem.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IClassificationLevel">
            <summary>
            Describes a level of a classification type.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationLevel.Name">
            <summary>
            The name of the level.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationLevel.Separator">
            <summary>
            Separator that is added between the code of an item of this level and the local code of a child item.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationLevel.DataType">
            <summary>
            The data type of a value for this level.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationLevel.FixedLength">
            <summary>
            The fixed length.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IClassificationLevelCollection">
            <summary>
            Contains items of type IClassificationLevel.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationLevelCollection.Count">
            <summary>
            The number of items.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IClassificationLevelCollection.Item(System.Int32)">
            <summary>
            Returns an IClassificationLevel item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an IClassificationLevel item.</param>
            <returns>An IClassificationLevel.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IClassificationLevelCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified level name?
            </summary>
            <param name="levelName">Level name to look for.</param>
            <returns>True if level name is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IClassificationLevelCollection.GetItem(System.String)">
            <summary>
            Returns an IClassificationLevel item based on level name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="levelName">The level name.</param>
            <returns>An IClassificationLevel.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IClassificationLevelCollection.GetSubCode(System.String,System.Int32)">
            <summary>
            Returns the prefix of the given code until the specified level.
            Throws an argument out of range exception if the level index is not valid.
            </summary>
            <param name="value">Code value.</param>
            <param name="levelIndex">Deepest level that must be included.</param>
            <returns>A sub code if successful, null otherwise.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IEnumRange">
            <summary>
            Describes an enumeration range.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IEnumRange.Kind">
            <summary>
            The kind of enumeration range (Simple or MinMax).
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IEnumRange.Value">
            <summary>
            The enumeration code value in case the kind is Simple. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IEnumRange.Name">
            <summary>
            The enumeration code name in case the kind is Simple. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IEnumRange.MinValue">
            <summary>
            The minimum code value in case the kind is MinMax. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IEnumRange.MinName">
            <summary>
            The minimum code name in case the kind is MinMax. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IEnumRange.MaxValue">
            <summary>
            The maximum code value in case the kind is MinMax. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IEnumRange.MaxName">
            <summary>
            The maximum code name in case the kind is MinMax. Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IEnumRangeCollection">
            <summary>
            Contains items of type IEnumRange.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IEnumRangeCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IEnumRangeCollection.Item(System.Int32)">
            <summary>
            Returns an IEnumRange item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an IEnumRange item.</param>
            <returns>An IEnumRange.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ILocalTypeCollection">
            <summary>
            Exposes all the object types that exist in a meta entity, grouped by type structure.
            When applied to a datamodel then the types do not contain items with type name origin 'System'.     
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ILocalTypeCollection.Contains(StatNeth.Blaise.API.Meta.TypeStructure)">
            <summary>
            Are types of a specific structure (BlockName, String, Enumeration,..) present?
            </summary>
            <param name="typeStructure">The type structure to look for.</param>
            <returns>True if structure is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ILocalTypeCollection.GetCollection(StatNeth.Blaise.API.Meta.TypeStructure)">
            <summary>
            Returns a collection of types with a specific structure. Can return null if the requested structure is not contained.
            Note that the member types of sets will be considered as separate Enumeration types. If one or more categories of an 
            enumeration or set type defined in the type section contain a text fill the texts are listed in the CategoryTexts 
            collection of the fields applying this type and not with the type in the collection with the specific structure. 
            When applied to a datamodel then the result does not contain items with type name origin 'System'. System types are types like Integer, String, Datetype and Timetype without any attributes. 
            It also does not contain enumeration and set types defined at field level while the field is an array.
            </summary>
            <param name="typeStructure">The type structure to look for.</param>
            <returns>An ITypeCollection.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IMultiModeCategory">
            <summary>
            Category of MultiMode datamodel 
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IType2">
            <summary>
            Extends IType. Offers e.g. access to mode dependent route paths.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType2.WrappedType">
            <summary>
            Returns the type TMyEnum for a definition like "F : TMyEnum, DK". 
            Only relevant if TypeNameOrigin is Extended. Returns null otherwise.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IType3">
            <summary>
            Extends IType2.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IType4">
            <summary>
            Extends IType3.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType4.Restriction">
            <summary>
            Regular expression that determines the allowed values. Only applicable if Structure = String.
            Returns null otherwise.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IType5">
            <summary>
            Extends IType4.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType5.BlobType">
            <summary>
            The type of a blob field. Only applicable to fields with structure Blob. Returns null otherwise.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IType5.IsValid(System.String,System.String,System.Byte[])">
            <summary>
            Checks whether the given values are valid in case of structure Blob.
            </summary>
            <param name="mimeType">The mime type to validate.</param>
            <param name="fileName">The file name to validate.</param>
            <param name="data">The data to validate.</param>
            <returns>True if valid, False when not.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ITypeCollection">
            <summary>
            Contains items of type IType.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ITypeCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ITypeCollection.Item(System.Int32)">
            <summary>
            Returns an IType based on index. Throws an argument out of range exception if invalid index. 
            </summary>
            <param name="index">The numerical index of an IType item.</param>
            <returns>An IType.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ITypeCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified type name?
            </summary>
            <param name="typeName">The type name to look for.</param>
            <returns>True if type is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ITypeCollection.GetItem(System.String)">
            <summary>
            Returns an IType item based on type name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="typeName">The name of the type.</param>
            <returns>An IType.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICategory">
            <summary>
            Describes a category of an enumeration type. If the datamodel has ModeBehaviour 'MultiMode'
            and you are interested in mode specific category (role)texts, you should cast this interface 
            to IMultiModeCategory.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategory.Code">
            <summary>
            The numerical code of the category. 
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategory.Name">
            <summary>
            The name (label) of the category.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategory.Texts">
            <summary>
            The texts from the predefined role Constants.TextRoles.Category for the category.
            Note: this collection COULD contain 0 elements if the IType this ICategory belongs to was retrieved via IDatamodel.Types, and not via IFieldInformation.Type. 
            If it was retrieved via IDatamodel.Types it will be empty if there is at least one category in the enumeration having a text containing variables (fills).
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategory.RoleTexts">
            <summary>
            All the predefined and self-defined role texts for the category. 
            Note: this collection COULD contain 0 elements if the IType this ICategory belongs to was retrieved via IDatamodel.Types, and not via IFieldInformation.Type. 
            If it was retrieved via IDatamodel.Types it will be empty if there is at least one category in the enumeration having a text containing variables (fills).        
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ICategoryCollection">
            <summary>
            Contains items of type ICategory.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategoryCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ICategoryCollection.Item(System.Int32)">
            <summary>
            Returns an ICategory based on index. Throws an argument out of range exception if invalid index. 
            </summary>
            <param name="index">The numerical index of an ICategory item.</param>
            <returns>An ICategory.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICategoryCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified category name?
            </summary>
            <param name="categoryName">The name of the category to look for.</param>
            <returns>True if the category is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICategoryCollection.GetItem(System.String)">
            <summary>
            Returns an ICategory item based on category name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="categoryName">The name of the category.</param>
            <returns>An ICategory.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICategoryCollection.Contains(System.Int32)">
            <summary>
            Does the collection contain an item for the specified category code?
            </summary>
            <param name="categoryCode">The code of the category to look for.</param>
            <returns>True if the category is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ICategoryCollection.GetItem(System.Int32)">
            <summary>
            Returns an ICategory item based on category code.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="categoryCode">The code of the category.</param>
            <returns>An ICategory.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IType">
            <summary>
            Describes the type of a (block) field, local, parameter, check or field property.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.Structure">
            <summary>
            The type structure indicates what kind of type this is (e.g. String, Real, BlockName)
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.TypeNameOrigin">
            <summary>
            The type name origin like Datamodel, Library, System etc.
            When used on definitions like "F: TMyEnum, DK", where TMyEnum is defined inside a type section, this property will return Extended.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.Name">
            <summary>
            The name of the type.
            Following rules apply:
            <list type="bullet">
            <item>        
            Enumeration types that are defined in place of a field definition in the main block, have a name that starts with 'TYPE.'
            </item>
            <item>        
            Enumeration types that are defined in place inside a block, have a name starting with the block type name followed by a "."
            </item>
            <item>        
            For a type defined in place with attributes (eg 'string[255], NOEMPTY') this property returns the name of the field (possibly starting with a block type name followed by a ".") that uses it.
            </item>
            <item>        
            For the type 'string' (defined in place and without length) this property returns 'STRING[255]'
            </item>
            </list>
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.WasProcedure">
            <summary>
            Indicates whether the type is generated during the creation of the runtime datamodel. 
            This occurs for instance with a block type that replaces a procedure
            definition containing fields and/or checks.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.IndexType">
            <summary>
            The type of the index in case of an array. Is null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.MemberType">
            <summary>
            The member type in case of an array or set. Is null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.Cardinality">
            <summary>
            The maximum number of elements in case of a set. Returns null if no maximum was defined, or for structure different from set.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.MaxLength">
            <summary>
            The maximum length in case of integer, real or string structure. 
            Returns null if no length was defined, or for types different from integer, real or string.
            Note: if value is null for a string type this type was defined as OPEN. 
            Also: if value is 255 for a string type this type was defined as STRING.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.MinValue">
            <summary>
            The minimum value in case of integer, real or enumeration structure. Is null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.MaxValue">
            <summary>
            The maximum value in case of integer, real or enumeration structure. Is null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.Decimals">
            <summary>
            The number of decimals in case of real structure. Returns null if no decimals were defined, or for types different from real.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.Ranges">
            <summary>
            The ranges in case of integer or real structure. Is null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.Categories">
            <summary>
            The categories in case of enumeration structure. If in combination with a MemberType the categories in case of a set. Is null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.BlockTexts">
            <summary>
            The block texts in case of block structure. Is null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.ClassificationDynamicLength">
            <summary>
            The maximum length a classification value (including the separators) can have. 
            May be null if not specified. Only applicable for structure Classification.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.ClassificationDepthKind">
            <summary>
            Specifies which restrictions regarding depth apply for valid classification values. 
            Only applicable for structure Classification.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.ClassificationMinimumLevel">
            <summary>
            The minimal required number of levels for values of a classification type in case ClassificationDepthKind is Minimum. 
            Is null otherwise. Only applicable for structure Classification.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.ClassificationKeyLength">
            <summary>
            The length of a value in case the classification type is used with a key field. 
            Only applicable for structure Classification.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.ClassificationItems">
            <summary>
            The items of the classification. Only applicable for structure Classification. Returns null otherwise.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.ClassificationLevels">
            <summary>
            The levels of the classification. Only applicable for structure Classification. Returns null otherwise.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IType.GetClassificationItem(System.String)">
            <summary>
            Retrieves a classification item based on its code value. Throws an argument out of range exception if item not found.
            Only applicable for structure Classification. Returns null otherwise.
            </summary>
            <param name="code">The code value to look for.</param>
            <returns>An IClassificationItem.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.SpecialAnswerSettings">
            <summary>
            Special answer settings like DK, RF for fields of this type. Returns null in case of structure array or blockname. For an array you have
            to use MemberType.SpecialAnswerSettings and for a blockname use the property Attributes.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IType.LibraryName">
            <summary>
             The name of the library (used in the libraries section) in case type name origin is Library. 
             Returns string.Empty otherwise.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IType.IsValid(System.Decimal)">
            <summary>
            Checks whether the given value is valid in case of structure integer or real.
            </summary>
            <param name="value">The value to validate.</param>
            <returns>True if valid, False when not.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IType.IsValid(System.Int32)">
            <summary>
            Checks whether the given value is valid in case of structure enumeration.
            </summary>
            <param name="value">The value to validate.</param>
            <returns>True if valid, False when not.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IType.IsValid(System.DateTime)">
            <summary>
            Checks whether the given value is valid in case of structure date or time.
            </summary>
            <param name="value">The value to validate.</param>
            <returns>True if valid, False when not.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IType.IsValid(System.String)">
            <summary>
            Checks whether the given value is valid in case of structure string or classification.
            A valid classification value consists out of the code values separated by dots.
            </summary>
            <param name="value">The value to validate.</param>
            <returns>True if valid, False when not.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IType.IsValid(System.Int32[])">
            <summary>
            Checks whether the given value is valid in case of structure set.
            </summary>
            <param name="value">The value to validate.</param>
            <returns>True if valid, False when not.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.IType.ToString">
            <summary>
            A textual representation of the type.
            </summary>
            <returns>Type as string.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.IIndexType">
            <summary>
            Describes the index type of an array.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IIndexType.MinIndex">
            <summary>
            The minimum index.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.IIndexType.MaxIndex">
            <summary>
            The maximum index. Can be null.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.INumberRange">
            <summary>
            Describes a number range, like 2 .. 4, or 23.50 .. 45.99
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.INumberRange.Kind">
            <summary>
            The kind of range (Simple, MinMax, ..).
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.INumberRange.Value">
            <summary>
            The value in case the kind is Simple. Can be null.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.INumberRange.MinValue">
            <summary>
            The minimum value in case the kind is MinMax or MinValueRange. Can be null.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.INumberRange.MaxValue">
            <summary>
            The maximum value in case the kind is MinMax or MaxValueRange. Can be null.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.INumberRangeCollection">
            <summary>
            Contains items of type INumberRange.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.INumberRangeCollection.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.INumberRangeCollection.Item(System.Int32)">
            <summary>
            Returns an INumberRange based on index.
            Throws an argument out of range exception if invalid index. 
            </summary>
            <param name="index">The numerical index of an INumberRange item.</param>
            <returns>An INumberRange.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.SettingValue">
            <summary>
            The values a setting can have.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.SettingValue.Disallow">
            <summary>
            The setting is not allowed.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.SettingValue.Allow">
            <summary>
            The setting is allowed.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ISpecialAnswerSetting">
            <summary>
            Describes a special answer setting.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ISpecialAnswerSetting.Name">
            <summary>
            Name of the special answer like Empty, DontKnow or Refusal.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.Meta.ISpecialAnswerSetting.Value">
            <summary>
            Allow or Disallow.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.ISpecialAnswerSettingCollection">
            <summary>
            Contains items of type ISpecialAnswerSetting. Use a ForEach loop to iterate through the items. 
            </summary>
            <see cref="T:StatNeth.Blaise.API.Meta.ISpecialAnswerSetting"/>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ISpecialAnswerSettingCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified special answer name?
            </summary>
            <param name="specialAnswerName">The special answer name to look for. Use the predefined names in Constants.SpecialAnswerNames</param>
            <returns>True if special answer name is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.ISpecialAnswerSettingCollection.GetSetting(System.String)">
            <summary>
            Retrieves a setting based on special answer name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="specialAnswerName">The name of the special answer to retrieve. Use the predefined names in Constants.SpecialAnswerNames</param>
            <returns>An ISpecialAnswerSetting.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.RangeKind">
            <summary>
            The kind of a number range.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RangeKind.Simple">
            <summary>
            Range has the form of a constant, like 3.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RangeKind.MinValueRange">
            <summary>
            Range is only limited by a minimum value.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RangeKind.MaxValueRange">
            <summary>
            Range is only limited by a maximum value.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.RangeKind.MinMaxRange">
            <summary>
            Range is limited by both a minimum and a maximum value, like 4 .. 7.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.TypeNameOrigin">
            <summary>
            Additional information about the origin of a type.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeNameOrigin.Datamodel">
            <summary>
            Type is defined in the datamodel and different from System and Extended.        
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeNameOrigin.Library">
            <summary>
            Type is defined in a library.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeNameOrigin.System">
            <summary>
            Types that are defined in the datamodel in place as (literally): Integer, Real, Open, Datetype and Timetype. 
            Note that there may not be a maximum length specified, nor a special answer setting.        
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeNameOrigin.External">
            <summary>
            Type is defined in a different datamodel.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeNameOrigin.Extended">
            <summary>
            User defined type in the datamodel (ie type defined inside type section) that is extended with special answer settings. For example "F: TMyEnum, DK"
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.TypeStructure">
            <summary>
            The Blaise types that can occur.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.Real">
            <summary>
            Real.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.Date">
            <summary>
            Date.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.Time">
            <summary>
            Time.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.Enumeration">
            <summary>
            Enumeration.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.Classification">
            <summary>
            Classification.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.Array">
            <summary>
            Array.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.Set">
            <summary>
            Set.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.DeltaDate">
            <summary>
            DeltaDate.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.DeltaTime">
            <summary>
            DeltaTime.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.BlockName">
            <summary>
            Block.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.Meta.TypeStructure.Blob">
            <summary>
            Blob.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.Meta.Main">
            <summary>
            Placeholder for module initializer
            </summary>
            <remarks>
            http://einaregilsson.com/module-initializers-in-csharp/
            </remarks>
        </member>
        <member name="M:StatNeth.Blaise.API.Meta.Main.Run">
            <summary>
            Run on first construction of this assembly
            </summary>
        </member>
    </members>
</doc>
