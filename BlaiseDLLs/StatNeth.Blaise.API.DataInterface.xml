<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StatNeth.Blaise.API.DataInterface</name>
    </assembly>
    <members>
        <member name="T:StatNeth.Blaise.API.DataInterface.ColumnType">
            <summary>
            Indicates the type a column in a table or index can have.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.DMKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.DMName">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.FormID">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.BeginStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.EndStamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.CollectMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.DataEntryBehaviour">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.ValidationStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.CheckSum">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.DPT">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.DataStream">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.Data">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.FieldStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.KeyValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.SpecialAnswer">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.Identifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.ContentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.AdminKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.MetaStream">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.TextType">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.TextData">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.KeyName">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.ErrorCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.RemarkCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.HardErrorCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.SoftErrorCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.RouteErrorCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.ResponseStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.StringData">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.IntegerData">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.RealData">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.BlobData">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.DateTimeData">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.FieldId">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.BlockId">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.IsDataComplete">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.DataStreamStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.GUID">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.DmlType">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.ItemType">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.ItemName">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.Count">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.Position">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.TrigramValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.CheckId">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.CheckStatus">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.CheckKind">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.IsSuppressed">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.ArrayIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.RowNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ColumnType.ItemId">
            <summary>
            
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.AccessMode">
            <summary>
            Determines the access mode to be used with a Blaise connection. Can be used with Blaise, XML and text files.
            Also influences the way how in-memory datasets are opened by a particular connection.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.AccessMode.Exclusive">
            <summary>
            Gives exclusive access to the data source.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.AccessMode.Shared">
            <summary>
            Gives shared access to the data source.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder">
            <summary>
            Allows you to construct a Blaise connection string by assigning values to corresponding properties. 
            After having initialized all connection properties you need, use the ConnectionString property or 
            ToString() method to obtain the connection string built.
            A Blaise connection string must be used in conjunction with the Blaise Data Provider for .NET, and 
            offers access to data sources of type Blaise, Text, XML, Json and BlaiseDataService.        
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.DataSource">
            <summary>
            The file name of the data source to open on the connection string. Returns string.Empty if the data source type is BlaiseDataService.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.ObjectPoolSize">
            <summary>
            The size of the object pools that will be maintained by the connection. Default value is 50.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.KeepConnectionOpen">
            <summary>
            Determines whether the connection to the database must stay open once it has been opened. Default value is true.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.TextFileFormat">
            <summary>
            The format of a text file. Applies to text files only.
            Default value is Separated.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.Blaise4CompatibleTextFile">
            <summary>
            Indicates whether the text file is compatible with Blaise 4 text data. Applies to text files only.
            Default value is true.
            Note: assigning false to this property will not have any effect. It will always keep the value true.        
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.ColumnWidths">
            <summary>
            Determines the columnWidths of a fixed column width formatted text file.
            Individual column widths can be separated by a comma, minus sign or a space.
            If you do not set this property then the system will automatically compute the column widths
            using the datamodel from the data interface.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.InMemory">
            <summary>
            Determines whether the data source must be loaded into memory. Applies to Text, XML and Json files.
            Default value is true.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.Separator">
            <summary>
            The column separator to be used. Only applicable if the data source type is Text.
            Default value is string.Empty.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.StringDelimiter">
            <summary>
            The string delimiter to be used with string fields. Only applicable if the data source type is Text.
            Default value is string.Empty.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.DateDelimiter">
            <summary>
            The date delimiter to be used with date fields. Only applicable if the data source type is Text.
            Default value is string.Empty.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.TimeDelimiter">
            <summary>
            The time delimiter to be used with time fields. Only applicable if the data source type is Text.
            Default value is string.Empty.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.RowDelimiter">
            <summary>
            The character(s) used to match the end of a row of data. Only applicable if the data source type is Text.
            Default is string.Empty, which means that the NewLine character as specified in the system will be used.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.DecimalSymbol">
            <summary>
            The decimal symbol as being used by real fields in a text file. Only applicable if the data source type is Text.
            Default value is ".".
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.DateFormat">
            <summary>
            Determines the format of date values that are being used in a text file. Only applicable if the data source type is Text.
            This format string must be conform the .NET Standard or Custom Date Format Strings.
            The default value is "dd-MM-yyyy".
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.TimeFormat">
            <summary>
            Determines the format of time values that are being used in a text file. Only applicable if the data source type is Text.
            This format string must be conform the .NET Standard or Custom Time Format Strings.
            The default value is "HH:mm".
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.Header">
            <summary>
            Indicates whether the data source starts with a header line. Only applicable if the data source type is Text.
            Default value is false.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.AccessMode">
            <summary>
            Determines the access mode in which the data source will be opened. Default value is Exclusive.
            Also influences the way how in-memory datasets are opened by a particular connection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.ReadOnly">
            <summary>
            When enabled, the database will be opened for read-only access and writing will be disabled. The default value is false.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.UseVersioning">
            <summary>
            When enabled, additional columns will be added to the tables to discriminate between different versions of record data.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.Password">
            <summary>
            The SQLite database encryption password. Only applicable if the data source type is Blaise.
            Note that you can also provide a password for encryption of the connection string. This can be done via
            IConnectionInfo.SetConnectionString().
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.Synchronous">
            <summary>
            The synchronization mode to use when writing to a SQLite database. Only applicable if the data source type is Blaise.
            The default value is Off.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder.TextFileEncoding">
            <summary>
            The code page name of the encoding to use with Text, Xml and Json files.
            The default value is "utf-8".
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder2">
            <summary>
            Extends IBlaiseConnectionStringBuilder.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder2.OffRouteChar">
            <summary>
            The off-route char.
            Only when the field is empty and the field is off-route the off-route character will be written to the text file.
            Default value is " ".
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder2.UnprocessedChar">
            <summary>
            The unprocessed char.
            Only when the field is empty, does not have the empty attribute and if not off-route the unprocessed character will be written to the text file. 
            Default value is " ".
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder3">
            <summary>
            Extends IBlaiseConnectionStringBuilder2 with properties that apply to a relative bdix file (DataSourceType is BlaiseDataService).
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder3.InstrumentId">
            <summary>
            The instrument id of an installed survey.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder3.HostName">
            <summary>
            The name of the server where the survey is installed. Can be 'localhost'.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder3.ServerPark">
            <summary>
            The name of the server park. Optional. If omitted then the default 'LocalDevelopment' will be used.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder3.Port">
            <summary>
            The port number. Typical value is 8033.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder3.ExternalFileName">
            <summary>
            The name of an external file name. Can be string.Empty
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder3.UserName">
            <summary>
            The name of the user.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder3.UserPassword">
            <summary>
            The password of the user.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder3.Binding">
            <summary>
            The binding to use. Either "http" or "https". Default value is "http".
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder4">
            <summary>
            Extends IBlaiseConnectionStringBuilder3.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder4.UseCodeForEnums">
            <summary>
            Should enumeration and set values be written using numerical codes instead of labels? Applies to Xml and Json.
            Default value is false.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder5">
            <summary>
            Extends IBlaiseConnectionStringBuilder4.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder5.AddUTF8BOM">
            <summary>
            Should a BOM get written to text files when using UTF8 encoding? Default value is True. Applies to text files.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder6">
            <summary>
            Extends IBlaiseConnectionStringBuilder5.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IBlaiseConnectionStringBuilder6.StandAlone">
            <summary>
            Applies to relative bdix (DataSourceType=BlaiseDataService) and denotes whether the data source is installed stand alone. Default value is False.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder">
            <summary>
            Serves as a base interface for IBlaiseConnectionStringBuilder.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.ConnectionString">
            <summary>
            Gets or sets the connection string associated with this interface.
            Returns the current connection string, created from the key/value pairs that are
            contained within this interface. The default value is an empty string.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.Count">
            <summary>
            The number of keys that are contained within the connection string maintained by this interface.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.IsFixedSize">
            <summary>
            Returns true if this interface has a fixed size, false otherwise. A fixed size means that you can 
            not add any new key/value pairs to the interface. The default is false.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.IsReadOnly">
            <summary>
            Returns true if this interface is read-only, false otherwise. The default is false.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.Keys">
            <summary>
            Gets an System.Collections.ICollection that contains the keys.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.Values">
            <summary>
            Gets an System.Collections.ICollection that contains the values.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="keyword">The key of the item to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not
            found, trying to get it returns a null reference (Nothing in Visual Basic),
            and trying to set it creates a new element using the specified key. Passing
            a null (Nothing in Visual Basic) key throws an System.ArgumentNullException.
            Assigning a null value removes the key/value pair.</returns>
            <exception cref="T:System.ArgumentNullException">keyword is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.NotSupportedException">The property is set, and the property IsReadOnly is true. 
            -or- The property is set, keyword does not exist in the collection, and the property
            IsFixedSize is true.
            </exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.Add(System.String,System.Object)">
            <summary>
            Adds an entry with the specified key and value.
            </summary>
            <param name="keyword">The key to add.</param>
            <param name="value">The value for the specified key.</param>
            <exception cref="T:System.ArgumentNullException">keyword is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.NotSupportedException">Either the property IsReadOnly or IsFixedSize returns true.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.Clear">
            <summary>
            Clears the contents of the underlying instance, and removes all the key/value pairs.
            The ConnectionString property is set to string.Empty.
            </summary>
            <exception cref="T:System.NotSupportedException">The property IsReadOnly is true.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            Determines whether the connection string contains a specific key.
            </summary>
            <param name="keyword">The key to locate.</param>
            <returns>True if the interface contains an entry with the specified key; otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">keyword is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.EquivalentTo(StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder)">
            <summary>
            Compares the connection information in this interface with the connection information in the supplied interface.
            </summary>
            <param name="connectionStringBuilder">The interface to be compared with this interface.</param>
            <returns>True if the connection information in both of the interfaces causes an equivalent connection string; otherwise false.
            </returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.Remove(System.String)">
            <summary>
            Removes the entry with the specified key from the key/value pairs.
            </summary>
            <param name="keyword">The key of the key/value pair to be removed from the connection string in this interface.</param>
            <returns>True if the key existed within the connection string and was removed; false if the key did not exist.</returns>
            <exception cref="T:System.ArgumentNullException">keyword is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.NotSupportedException">Either the property IsReadOnly or IsFixedSize returns true.</exception>        
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.ShouldSerialize(System.String)">
            <summary>
            Indicates whether the specified key exists in this interface.
            </summary>
            <param name="keyword">The key to locate.</param>
            <returns>True if the interface contains an entry with the specified key; otherwise false.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.ToString">
            <summary>
            Returns the connection string associated with this interface.
            </summary>
            <returns>The ConnectionString property.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves a value corresponding to the supplied key from this interface.
            </summary>
            <param name="keyword">The key of the item to retrieve.</param>
            <param name="value">The value corresponding to the key.</param>
            <returns>True if keyword was found within the connection string, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">keyword is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.SynchronizationMode">
            <summary>
            Determines how the database is synchronized with writing to hard disk. Applies only to SQLite based connections.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.SynchronizationMode.Normal">
            <summary>
            The database engine will still pause at the most critical moments, but less often than in Full mode. The Normal mode is faster than the Full mode.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.SynchronizationMode.Full">
            <summary>
            The database engine will pause at critical moments to make sure that data has actually been written to the disk surface before continuing.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.SynchronizationMode.Off">
            <summary>
            The database engine continues without pausing as soon as it has handed data off to the operating system. The database might become corrupted if the operating system crashes or the computer loses power. This is the fastest mode.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.TextFileFormat">
            <summary>
            Describes the format of a text file.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TextFileFormat.Separated">
            <summary>
            Separated.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TextFileFormat.FixedColumnWidths">
            <summary>
            Fixed column widths.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.DataInterfaceException">
            <summary>
            Exception from <see cref="T:StatNeth.Blaise.API.DataInterface.IDataInterface"/>
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StatNeth.Blaise.API.DataInterface.DataInterfaceException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StatNeth.Blaise.API.DataInterface.DataInterfaceException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorNumber">The error number.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:StatNeth.Blaise.API.DataInterface.DataInterfaceException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.DataInterfaceException.ErrorNumber">
            <summary>
            Gets or sets the error number.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.DataProviderType">
            <summary>
            Describes the possible data provider types.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.BlaiseDataProviderForDotNET">
            <summary>
            Blaise Data Provider for .NET (StatNeth.Blaise.Data.Provider). Can also be used for text and XML files.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.DotNETFrameworkDataProviderForSQLServer">
            <summary>
            .NET Framework Data Provider for SQL Server (System.Data.SqlClient)
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.DotNETFrameworkDataProviderForOracle">
            <summary>
            .NET Framework Data Provider for Oracle (System.Data.OracleClient)
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.OracleDataProviderForDotNET">
            <summary>
            Oracle Data Provider for .NET (Oracle.DataAccess.Client)
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.OracleManagedDataProviderForDotNET">
            <summary>
            Oracle Data Provider for .NET (Oracle.ManagedDataAccess.Client)
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.SQLiteDataProvider">
            <summary>
            SQLite Data Provider (System.Data.SQLite)
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.NpgSQLDataProviderForPostgreSQL">
            <summary>
            Npgsql .NET Data Provider for PostgreSQL (npgsql)
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.MySQLDataProvider">
            <summary>
            MySQL Data Provider (MySQL.Data.MySQLClient)
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.DB2DataProvider">
            <summary>
            IBM DB2 .NET Data Provider (IBM.Data.DB2)
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataProviderType.OleDbDataProvider">
            <summary>
            Mircosoft .NET Data Provider for OleDb
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IDataInterface2">
            <summary>
            Extends IDataInterface.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface2.CreateTableDefinitions(System.Boolean)">
            <summary>
            Creates logical catalog(s), schema(s) and table definitions in the data interface. This does not create tables in the target database.
            The data partition type determines the structure of your tables. You have to set the DatamodelFileName and
            also fill the ConnectionInfo, before you can call this method. Both are required for creating table definitions.
            Note that possibly existing table definitions will be deleted first.
            </summary>        
            <param name="prepareForDataVersioning">Determines whether a beginstamp and endstamp should be added to the tables. This enables the
             possibility to store multiple versions of a data record</param>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IDataInterface5">
            <summary>
            Extends IDataInterface3.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:StatNeth.Blaise.API.DataInterface.IDataInterface5.Guid" -->
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface5.WaveName">
            <summary>
            Returns the WaveName if the DataInterface is used in combination with a Wave project
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface5.UpdateMetaTables(System.Boolean)">
            <summary>
            Updates the IDInfo table (if present) in the database with field information.        
            </summary>
            <param name="forceUpdate">Should an update be enforced? If False then nothing will be done if table contains rows.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface5.AddFlatDataTable(System.String,System.String,System.String[])">
            <summary>
            Adds a flat data table to the data interface.
            Notes: make sure to call CreateDatabaseObjects() and SaveToFile() afterwards.
            </summary>
            <param name="catalogName">Name of the catalog to use. Can be string.Empty if you're using the default catalog.</param>
            <param name="schemaName">Name of the schema where the table should be added. Can be string.Empty if you're using the default schema.</param>
            <param name="fields">The fully qualified fieldnames that should form the columns of the table.</param>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IDataInterface4">
            <summary>
            Extends IDataInterface3.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface4.CreateDatabaseObjects(System.Boolean,System.Boolean,System.String)">
            <summary>
            Creates the physical database objects (like tables, indexes, sequences) in the target database. In case the 
            data interface is file based and its data source does not already exist, this data source file will
            be created also.
            You may specify a connection string with this method. If you do, then this connection string will be used instead
            of the connection string in the data interface. This allows to call this method with users who have more privileges
            in the database.        
            </summary>
            <param name="connectionString">The connection string to be used instead of the connection string that is stored
            in the data interface. If no connection string is specified then the data interface connection string will be used.</param>
            <param name="dropExisting">If true then already existing database objects will be dropped. If false and some database object 
            <param name="reportErrors">Indicates whether an error should be raised during the operation</param>
            already exists an exception will be raised. The latter is only done if the data interface is not file based.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface4.DropDatabaseObjects(System.Boolean,System.String)">
            <summary>
            Drops the physical database objects (like tables, indexes, sequences) in the target database.
            You may specify a connection string with this method. If you do, then this connection string will be used instead
            of the connection string in the data interface. This allows to call this method with users who have more privileges
            in the database.
            This method is only relevant to data interfaces which are targeting a relational database.
            Note: possible errors while dropping are not translated into exceptions.
            </summary>
            <param name="connectionString">The connection string to be used instead of the connection string that is stored
            in the data interface. If no connection string is specified then the data interface connection string will be used.</param>
            <param name="reportErrors">Indicates whether an error should be raised when dropping the tables</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface4.RefreshDataModel(System.String,System.String,System.String)">
            <summary>
            Refreshes the DataModel information in the DataInterface
            </summary>
            <param name="newDataModelFileName">File name of the new datamodel</param>
            <param name="dataModelSearchPaths">Search path for datamodels required by the new datamodel</param>
            <param name="librarySearchPaths">Search path for libraries required by the new datamodel</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface4.RefreshDataModel(StatNeth.Blaise.API.Meta.IDatamodel,StatNeth.Blaise.API.Meta.IDatamodel)">
            <summary>
            Refreshes the DataModel information in the DataInterface
            </summary>
            <param name="newDataModel">The old datamodel</param>
            <param name="oldDataModel">The new datamodel</param>
            <returns></returns>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IDataInterface3">
            <summary>
            Extends IDataInterface2.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface3.RecordFilter">
            <summary>
            The record filter condition.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.DatabaseObjectType">
            <summary>
            Describes the object type of a table.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DatabaseObjectType.Table">
            <summary>
            Table.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DatabaseObjectType.View">
            <summary>
            View.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ObjectType">
            <summary>
            Describes the Blaise object type of a table.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ObjectType.NotApplicable">
            <summary>
            Not applicable.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ObjectType.BlockDefinition">
            <summary>
            Table is associated with a block definition from the datamodel.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ObjectType.KeyDefinition">
            <summary>
            Table is associated with a key definition from the datamodel.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ICatalogCollection">
            <summary>
            Contains items of type ICatalog.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ICatalogCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ICatalogCollection.Item(System.Int32)">
            <summary>
            Returns an ICatalog item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an ICatalog item.</param>
            <returns>An ICatalog.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ICatalogCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified catalog name?
            </summary>
            <param name="catalogName">The name of the catalog to look for. Use string.Empty for the default catalog.</param>
            <returns>True if the catalog is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ICatalogCollection.GetItem(System.String)">
            <summary>
            Returns an ICatalog item based on catalog name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="catalogName">The name of the catalog. Use string.Empty for the default catalog.</param>
            <returns>An ICatalog.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ICatalogCollection.Add(System.String)">
            <summary>
            Creates and adds an ICatalog to the collection.
            </summary>
            <param name="catalogName">The name of the new catalog. Use string.Empty for the default catalog.</param>
            <returns>An ICatalog.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ICatalogCollection.Remove(System.String)">
            <summary>
            Removes the ICatalog item with the specified name from the collection.
            </summary>
            <param name="catalogName">Name of catalog to be removed.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ICatalogCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the ICatalog item at the specified index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ICatalogCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.DataSourceType">
            <summary>
            Describes the type of the data source.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.Blaise">
            <summary>
            Blaise.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.SQL">
            <summary>
            SQL Server.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.Oracle">
            <summary>
            Oracle.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.Access">
            <summary>
            MS Access.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.MySQL">
            <summary>
            My SQL.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.SQLite">
            <summary>
            SQLite.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.XML">
            <summary>
            XML.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.Other">
            <summary>
            Other.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.PostgreSQL">
            <summary>
            PostgreSQL.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.Sybase">
            <summary>
            Sybase.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.BlaiseDataService">
            <summary>
            Blaise Data Service. For relative bdix files.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.Json">
            <summary>
            Json.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataSourceType.DB2">
            <summary>
            DB2.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IDbProviderFactory">
            <summary>
            Contains information about the .NET Data Provider to be used with the connection.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDbProviderFactory.Clear">
            <summary>
            Clears the provider information.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbProviderFactory.Description">
            <summary>
            Description of the .NET Data Provider.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbProviderFactory.InvariantName">
            <summary>
            Invariant name of the .NET Data Provider.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbProviderFactory.Name">
            <summary>
            Name of the .NET Data Provider.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDbProviderFactory.Type">
            <summary>
            Type name of the .NET Data Provider.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ISequenceCollection">
            <summary>
            Contains items of type ISequence.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ISequenceCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ISequenceCollection.Item(System.Int32)">
            <summary>
            Returns an ISequence item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an ISequence item.</param>
            <returns>An ISequence.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISequenceCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified sequence name?
            </summary>
            <param name="sequenceName">The name of the sequence to look for.</param>
            <returns>True if the Sequence is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISequenceCollection.GetItem(System.String)">
            <summary>
            Returns an ISequence item based on sequence name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="sequenceName">The name of the sequence.</param>
            <returns>An ISequence.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISequenceCollection.Add(System.String)">
            <summary>
            Creates and adds an ISequence to the collection.
            </summary>
            <param name="sequenceName">The name of the new sequence.</param>
            <returns>An ISequence.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISequenceCollection.Remove(System.String)">
            <summary>
            Removes the ISequence item with the specified name from the collection.
            </summary>
            <param name="sequenceName">Name of sequence to be removed.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISequenceCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the ISequence item at the specified index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISequenceCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ISequence">
            <summary>
            Contains information about a sequence.
            A sequence will be used to generate unique numbers.
            Sequences are used by particular databases only (Oracle, Postgress).
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ISequence.Name">
            <summary>
            Name of the sequence.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ISequence.SequenceType">
            <summary>
            Indicates the item for which the sequence generates numbers.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IndexType">
            <summary>
            Type of the index.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.IndexType.Primary">
            <summary>
            Primary index.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.IndexType.Unique">
            <summary>
            Unique index.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.IndexType.NonUnique">
            <summary>
            Non unique index.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IIndex">
            <summary>
            Represents an index on a table in the data source.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IIndex.Name">
            <summary>
            Name of the index.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IIndex.IndexType">
            <summary>
            Type of the index.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IIndex.Columns">
            <summary>
            Columns which are part of the index.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.DataInterface.DataChecksum">
            <summary>
            Returns the DataInterface's DataCheckSum. The DataCheckSum is determined by the datamodel that is associated with this DataInterface
            and can be used to see  whether the DataInterface's table structure is still valid.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.DataInterface.SupportsRecordUpdating">
            <summary>
            Indicates whether the DataInterface supports record updating
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.DataInterface.SupportsVersioning">
            <summary>
            Indicates whether the DataInterface supports versioning
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IIndexCollection">
            <summary>
            Contains items of type IIndex.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IIndexCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IIndexCollection.Item(System.Int32)">
            <summary>
            Returns an IIndex item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an IIndex item.</param>
            <returns>An IIndex.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IIndexCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified index name?
            </summary>
            <param name="indexName">The name of the Index to look for.</param>
            <returns>True if the Index is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IIndexCollection.GetItem(System.String)">
            <summary>
            Returns an IIndex item based on index name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="indexName">The name of the index.</param>
            <returns>An IIndex.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IIndexCollection.Add(System.String)">
            <summary>
            Creates and adds an IIndex to the collection.
            </summary>
            <param name="indexName">The name of the new index.</param>
            <returns>An IIndex.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IIndexCollection.Remove(System.String)">
            <summary>
            Removes the IIndex item with the specified name from the collection.
            </summary>
            <param name="indexName">Name of index to be removed.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IIndexCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the IIndex item at the specified index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IIndexCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IColumnCollection">
            <summary>
            Contains items of type IColumn.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IColumnCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IColumnCollection.Item(System.Int32)">
            <summary>
            Returns an IColumn item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an IColumn item.</param>
            <returns>An IColumn.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IColumnCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified Column name?
            </summary>
            <param name="columnName">The name of the Column to look for.</param>
            <returns>True if the Column is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IColumnCollection.GetItem(System.String)">
            <summary>
            Returns an IColumn item based on language name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="columnName">The name of the Column.</param>
            <returns>An IColumn.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IColumnCollection.Add(System.String)">
            <summary>
            Creates and adds an IColumn to the collection.
            </summary>
            <param name="columnName">The name of the new column.</param>
            <returns>An IColumn.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IColumnCollection.Remove(System.String)">
            <summary>
            Removes the IColumn item with the specified name from the collection.
            </summary>
            <param name="columnName">Name of column to be removed.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the IColumn item at the specified index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IColumnCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ITableCollection">
            <summary>
            Contains items of type ITable.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ITableCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ITableCollection.Item(System.Int32)">
            <summary>
            Returns an ITable item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an ITable item.</param>
            <returns>An ITable.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ITableCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified table name?
            </summary>
            <param name="tableName">The name of the table to look for.</param>
            <returns>True if the table is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ITableCollection.GetItem(System.String)">
            <summary>
            Returns an ITable item based on table name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>An ITable.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ITableCollection.Add(System.String)">
            <summary>
            Creates and adds an ITable to the collection.
            </summary>
            <param name="tableName">The name of the new table.</param>
            <returns>An ITable.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ITableCollection.Remove(System.String)">
            <summary>
            Removes the ITable item with the specified name from the collection.
            </summary>
            <param name="tableName">Name of table to be removed.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ITableCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the ITable item at the specified index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ITableCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.DataPartitionType">
            <summary>
            Defines the table structures in the data interface.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataPartitionType.Undefined">
            <summary>
            Data source is a relative bdix file, or the data partition type has not been set yet.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataPartitionType.SingleTable">
            <summary>
            Data interface has only one table definition. Applies to an existing table and text files.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataPartitionType.FlatBlocks">
            <summary>
            Data will be stored according to the Blaise block structure. There is/will be a table
            for each block definition in the datamodel.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataPartitionType.InDepth">
            <summary>
            Data will be stored in depth as field, status, value. Only fields that have data will be stored. 
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataPartitionType.Stream">
            <summary>
            Data will be stored as a binary stream of data. This is the default format. 
            Note that this is also the data partition type to use with Xml files.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataPartitionType.GenericInDepth">
            <summary>
            Data will be stored generic and in depth. Generic means that the data of multiple surveys will be stored in the same set 
            of database tables.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataPartitionType.GenericStream">
            <summary>
            Data will be stored generic and as stream. Generic means that the data of multiple surveys will be stored in the same set 
            of database tables.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.DataPartitionType.FlatNoBlocks">
            <summary>
            Data will be stored according in flat data tables. There is/will be a separate column for each datafield
            of the .
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ISchemaCollection">
            <summary>
            Contains items of type ISchema.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ISchemaCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ISchemaCollection.Item(System.Int32)">
            <summary>
            Returns an ISchema item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an ISchema item.</param>
            <returns>An ISchema.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISchemaCollection.Contains(System.String)">
            <summary>
            Does the collection contain an item for the specified schema name?
            </summary>
            <param name="schemaName">The name of the schema to look for. Use string.Empty for the default schema.</param>
            <returns>True if the schema is contained. False otherwise.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISchemaCollection.GetItem(System.String)">
            <summary>
            Returns an ISchema item based on schema name.
            Throws an argument out of range exception if item not found.
            </summary>
            <param name="schemaName">The name of the schema. Use string.Empty for the default schema.</param>
            <returns>An ISchema.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISchemaCollection.Add(System.String)">
            <summary>
            Creates and adds an ISchema to the collection.
            </summary>
            <param name="schemaName">The name of the new schema. Use string.Empty for the default schema.</param>
            <returns>An ISchema.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISchemaCollection.Remove(System.String)">
            <summary>
            Removes the ISchema item with the specified name from the collection.
            </summary>
            <param name="schemaName">Name of schema to be removed.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISchemaCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the ISchema item at the specified index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.ISchemaCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IColumn">
            <summary>
            Represents a column in a data source table.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IColumn.Name">
            <summary>
            Name of the column. This is also the column name in the database table.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IColumn.FieldName">
            <summary>
            Blaise field name to which the column is mapped.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IColumn.ColumnType">
            <summary>
            Type of the column.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IColumn.IsPrimaryKeyColumn">
            <summary>
            Indicates whether the column is part of the primary key of the table.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IColumn.IsIdentifierColumn">
            <summary>
            Indicates whether the column is an auto number column. The database will
            provide the values for this column.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ITable">
            <summary>
            Represents a table or view in the data source.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ITable.Name">
            <summary>
            Name of the table or view.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ITable.TableType">
            <summary>
            Type of the table.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ITable.ObjectType">
            <summary>
            Indicates the Blaise object type associated with this table, if applicable.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ITable.DatabaseObjectType">
            <summary>
            Indicates whether the table definitions targets a table or view 
            in the database.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ITable.Columns">
            <summary>
            The columns of the table.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ITable.Indexes">
            <summary>
            The indexes on the table.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ITable.BlaiseObjectName">
            <summary>
            Contains the name of the Blaise object, if the table is associated with a Blaise object
            This can be a block definition or key definition name.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ICatalog">
            <summary>
            Catalog is the entry point to the available database objects.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ICatalog.Name">
            <summary>
            The name of the catalog. Can be string.Empty if you're using the default catalog.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ICatalog.Schemas">
            <summary>
            The schema's that are present in the catalog.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ISchema">
            <summary>
            Contains information about the schema.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ISchema.Name">
            <summary>
            Name of the schema. Can be string.Empty if you're using the default schema.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ISchema.Tables">
            <summary>
            Tables that will be accessed in the schema.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.ISchema.Sequences">
            <summary>
            Sequences that will be accessed in the schema. Sequences are relevant 
            for particular databases only (Oracle, Postgress).
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.DataInterfaceManager">
            <summary>
            The entry point to Blaise 5 data interfaces.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceManager.GetDataInterface">
            <summary>
            Returns an empty IDataInterface.
            </summary>
            <returns>An IDataInterface.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceManager.GetDataInterface(System.Guid)">
            <summary>
            *** NO LONGER SUPPORTED: use GetDataInterface(string, int, string, System.Security.SecureString, Guid) instead  *** 
            Retrieves an IDataInterface for an installed survey. Note that this IDataInterface will be read only.
            </summary>
            <param name="instrumentID">Ihe identification of an installed survey.</param>        
            <returns>An IDataInterface.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID is empty.</exception>
            <exception cref="T:System.ArgumentException">If no survey could be found with the given instrumentID.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceManager.GetDataInterface(System.String,System.Int32,System.String,System.Security.SecureString,System.Guid)">
            <summary>
            Retrieves an IDataInterface for an installed survey on a (remote) server. Note that this IDataInterface will be read only.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="port">The internal communication port. Default value is 8031.</param>
            <param name="username">The user name.</param>
            <param name="password">The password.</param>
            <param name="instrumentID">The identification of an installed survey.</param>        
            <returns>An IDataInterface.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID is empty.</exception>
            <exception cref="T:System.ArgumentException">If no survey could be found with the given instrumentID.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceManager.GetDataInterface(System.String,System.String,System.Int32,System.String,System.Security.SecureString,System.Guid)">
            <summary>
            Retrieves an IDataInterface for an installed survey on a (remote) server. Note that this IDataInterface will be read only.
            </summary>
            <param name="binding"></param>
            <param name="serverName">The name of the server.</param>
            <param name="port">The internal communication port. Default value is 8031.</param>
            <param name="username">The user name.</param>
            <param name="password">The password.</param>
            <param name="instrumentID">The identification of an installed survey.</param>        
            <returns>An IDataInterface.</returns>
            <exception cref="T:System.ArgumentNullException">If instrumentID is empty.</exception>
            <exception cref="T:System.ArgumentException">If no survey could be found with the given instrumentID.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceManager.GetDataInterface(System.String)">
            <summary>
            Loads a data interface from a bdix file and returns and IDataInterface for it.
            </summary>
            <param name="fileName">File name of bdix file.</param>        
            <returns>An IDataInterface.</returns>        
            <exception cref="T:System.IO.FileNotFoundException">If fileName does not exist.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceManager.CreateDefault(System.String)">
            <summary>
            Creates default data interface (bdix) and database (bdbx) files for the specified datamodel. 
            These files will be created in the same folder as the datamodel file. 
            Default means: data source type: Blaise, .NET data provider: Blaise Data Provider, data partition type: Stream, 
            non generic and does not support versioning. The table definitions and database objects will be created according to these values.
            Please note: this method can result in data loss because possibly existing files (including bdbx) will be overwritten without warning!
            </summary>
            <param name="dataModelFileName">File name of bmix datamodel file.</param>
            <returns>An IDataInterface.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If dataModelFileName does not exist.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceManager.CreateDefault(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates default data interface (bdix) and database (bdbx) files for the specified datamodel. 
            These files will be created in the same folder as the datamodel file. 
            Default means: data source type: Blaise, .NET data provider: Blaise Data Provider, data partition type: Stream, 
            non generic and does not support versioning. The table definitions and database objects will be created according to these values.
            Please note: this method can result in data loss because possibly existing files (including bdbx) will be overwritten without warning!
            </summary>
            <param name="dataModelFileName">File name of bmix datamodel file.</param>
            <param name="librarySearchPaths">Search paths for compiled library (blix) files. May be null if not relevant.</param>
            <returns>An IDataInterface.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If dataModelFileName does not exist.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceManager.CreateDefault(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates default data interface (bdix) and database (bdbx) files for the specified datamodel, data interface and database file names.
            Default means: data source type: Blaise, .NET data provider: Blaise Data Provider, data partition type: Stream, non generic and 
            does not support versioning. The table definitions and database objects will be created according to these values.
            Please note: this method can result in data loss because possibly existing files (including bdbx) will be overwritten without warning!
            </summary>
            <param name="dataModelFileName">File name of bmix datamodel file.</param>
            <param name="dataInterfaceFileName">File name of bdix data interface file. Must have same path as the datamodel file name. If no path specified, then it is assumed to be in the same folder as the datamodel file name.</param>
            <param name="databaseFileName">File name of bdbx database file. If you specify a path then this must be the same path as the datamodel file name. If no path specified, then it is assumed to be in the same folder as the datamodel file name.</param>
            <param name="librarySearchPaths">Search paths for compiled library (blix) files. May be null if not relevant.</param>
            <returns>An IDataInterface.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If dataModelFileName does not exist.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.DataInterfaceManager.GetBlaiseConnectionStringBuilder(System.String)">
            <summary>
            Allows you to construct a Blaise connection string by assigning values to corresponding properties of IBlaiseConnectionStringBuilder. 
            Then you can use its ConnectionString property which builds the right connection string for you.
            A Blaise connection string must be used in conjunction with the Blaise Data Provider for .NET, and offers access to data sources
            of type Blaise, Text, XML and Json.
            </summary>
            <param name="connectionString">A Blaise connection string. Offers the possibility to access the elements of the connection string
            in a structured way, by using the corresponding properties of the interface. Default value is null.</param>
            <returns>An IBlaiseConnectionStringBuilder.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IConnectionInfo">
            <summary>
            Contains information about the connection to the target database.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IConnectionInfo.GetConnectionString(System.String)">
            <summary>
            Gets the connection string. If the connection string is password protected
            you'll have to provide the correct password to obtain the connection string.
            </summary>
            <param name="password">Password if connection string is password protected.</param>
            <returns>The connection string.</returns>
            <exception cref="T:System.ArgumentException">If wrong password specified.</exception>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IConnectionInfo.SetConnectionString(System.String,System.String)">
            <summary>
            Sets the connection string. If the connection string is password protected
            you'll have to provide the correct password to set the connection string. 
            It is advised to use a .NET connection string builder class for conveniently building connection strings. For instance for SQL server use
            the SqlConnectionStringBuilder class from System.Data.SqlClient namespace, for Oracle use the OracleConnectionStringBuilder 
            class from the System.Data.OracleClient namespace. 
            For the Blaise .NET data provider you should use IBlaiseConnectionStringBuilder, as returned by 
            DataInterfaceManager.GetBlaiseConnectionStringBuilder().
            Note: in case you have a file based data source you must make sure that the data source 
            is in the same folder as the data interface.
            </summary>
            <param name="connectionString">The connection string to set.</param>
            <param name="password">Password if the connection string is password protected.</param>
            <exception cref="T:System.ArgumentException">If wrong password specified.</exception>
            <exception cref="T:StatNeth.Blaise.API.DataInterface.DataInterfaceException">If data source is file based and points to different folder as the data interface.</exception>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IConnectionInfo.IsFileBased">
            <summary>
            Returns true if the data source is file based (Blaise, Text, XML, Json, Access). Returns false for server based data sources.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IConnectionInfo.DataProviderType">
            <summary>
            The type of the data provider to use with this connection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IConnectionInfo.DbProviderFactory">
            <summary>
            Contains information about the .NET Data Provider to use with the connection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IConnectionInfo.DataSourceType">
            <summary>
            The data source type.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IConnectionInfo.GetRootedConnectionString(System.String)">
            <summary>
            Gets the rooted connection string. If you're using a file based database
            then the connection string will contain a full path to the database file.
            Full paths are often required by the .NET Data Provider to be able to open the
            connection. If the connection string is password protected
            you'll have to provide the correct password to obtain the connection string.
            </summary>
            <param name="password">Password if connection string is password protected.</param>
            <returns>The connection string.</returns>
            <exception cref="T:System.ArgumentException">If wrong password specified.</exception>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IDataInterface">
            <summary>
            Describes a Blaise 5 data interface.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.DatamodelFileName">
            <summary>
            The datamodel file name (bmix). If you are interested in the full path of the datamodel then you should use the method GetRootedDatamodelFileName().
            When assigning and the FileName already has a value then you must use the same path as the FileName property. Moreover, the
            datamodel file must exist.
            </summary>
            <exception cref="T:StatNeth.Blaise.API.DataInterface.DataInterfaceException">If assigning a value that points to a different folder as the FileName.</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the file does not exist.</exception>        
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.Version">
            <summary>
            Version of the data interface.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.FileName">
            <summary>
            File name (bdix) of the data interface. The file name will be set if you load
            the data interface from file. When assigning and the datamodel file name already has a value then you 
            must use the same path as the datamodel file name.
            </summary>
            <exception cref="T:StatNeth.Blaise.API.DataInterface.DataInterfaceException">If assigning a value that points to a different folder as the DatamodelFileName.</exception>        
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.LibrarySearchPath">
            <summary>
            Library search path to be used to open the meta files, if needed.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.DataPartitionType">
            <summary>
            The data partition type for this data interface. This determines the structure of the tables.
            Note: use DataPartitionType.SingleTable for text files and DataPartitionType.Stream for Xml and Json files.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.DataChecksum">
            <summary>
            Returns the data checksum. The DataChecksum is determined by the datamodel that is associated with this data interface
            and can be used to determine whether the table structure is still valid.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.SupportsRecordUpdating">
            <summary>
            Indicates whether the data interface supports record updates.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.SupportsRecordStreams">
            <summary>
            Indicates whether the data interface supports binary record streams.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.SupportsFormIds">
            <summary>
            Indicates whether the data interface supports internal form ids.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.SupportsVersioning">
            <summary>
            Indicates whether the data interface supports record versioning.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.ConnectionInfo">
            <summary>
            Returns the connection info.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IDataInterface.Catalogs">
            <summary>
            Returns the catalog information. From here you can get to the schema and table structures.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface.GetRootedDatamodelFileName">
            <summary>
            Datamodel file names are stored without path. This method gets the rooted datamodel file
            name based on the path of FileName.
            </summary>
            <returns>The full path to the datamodel file name.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface.Validate">
            <summary>
            Validates the contents of the data interface. If valid then the property IsValid of the result collection will return true.
            </summary>        
            <returns>An IValidationResultCollection.</returns>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface.SaveToFile(System.Boolean)">
            <summary>
            Saves the contents of the data interface to bdix file. Uses the FileName property as file name.
            </summary>
            <param name="overwriteExisting">Indicates whether an already existing file must be overwritten. If false and the bdix exists an exception will be raised.</param>
            <exception cref="T:StatNeth.Blaise.API.DataInterface.DataInterfaceException">If overwriteExisting is false and the FileName already exists.</exception>        
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface.CreateTableDefinitions">
            <summary>
            Creates logical catalog(s), schema(s) and table definitions in the data interface. This does not create tables in the target database.
            The data partition type determines the structure of your tables. You have to set the DatamodelFileName and
            also fill the ConnectionInfo, before you can call this method. Both are required for creating table definitions.
            Note that possibly existing table definitions will be deleted first.
            </summary>        
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface.DeleteTableDefinitions">
            <summary>
            Deletes the logical catalog(s), schema(s) and table definitions from the data interface.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface.CreateDatabaseObjects(System.String,System.Boolean)">
            <summary>
            Creates the physical database objects (like tables, indexes, sequences) in the target database. In case the 
            data interface is file based and its data source does not already exist, this data source file will
            be created also.
            You may specify a connection string with this method. If you do, then this connection string will be used instead
            of the connection string in the data interface. This allows to call this method with users who have more privileges
            in the database.        
            </summary>
            <param name="connectionString">The connection string to be used instead of the connection string that is stored
            in the data interface. If no connection string is specified then the data interface connection string will be used.</param>
            <param name="dropExisting">If true then already existing database objects will be dropped. If false and some database object 
            already exists an exception will be raised. The latter is only done if the data interface is not file based.</param>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IDataInterface.DropDatabaseObjects(System.String)">
            <summary>
            Drops the physical database objects (like tables, indexes, sequences) in the target database.
            You may specify a connection string with this method. If you do, then this connection string will be used instead
            of the connection string in the data interface. This allows to call this method with users who have more privileges
            in the database.
            This method is only relevant to data interfaces which are targeting a relational database.
            Note: possible errors while dropping are not translated into exceptions.
            </summary>
            <param name="connectionString">The connection string to be used instead of the connection string that is stored
            in the data interface. If no connection string is specified then the data interface connection string will be used.</param>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.SequenceType">
            <summary>
            Describes the type of a sequence.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.SequenceType.DMKey">
            <summary>
            DMKey.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.SequenceType.FormID">
            <summary>
            FormID.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.TableType">
            <summary>
            Indicates the type of a table.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.FlatData">
            <summary>
            Flat data.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.FlatBlockData">
            <summary>
            Flat block data.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.InDepth">
            <summary>
            In depth.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.FormInfo">
            <summary>
            Form info.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.KeyInfo">
            <summary>
            Key info.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.IDInfo">
            <summary>
            ID info. 
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.CaseInfo">
            <summary>
            case info.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.CheckInfo">
            <summary>
            Checxk info.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.DataModelInfo">
            <summary>
            Datamodel info.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.Dml">
            <summary>
            Dml.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.Trigram">
            <summary>
            Trigram.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.TrigramNumber">
            <summary>
            Trigram number.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.TrigramSearch">
            <summary>
            Trigram search.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.ModeInfo">
            <summary>
            ModeInfo
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.Meta">
            <summary>
            Meta
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.TableType.FieldProperty">
            <summary>
            FieldProperty
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IValidationResult">
            <summary>
            Describes a validation result that is part of the result of IDataInterface.Validate().
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IValidationResult.Severity">
            <summary>
            The severity like error or warning.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IValidationResult.ItemType">
            <summary>
            The type of the item involved like connection, table or column.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IValidationResult.Message">
            <summary>
            The message associated with the validation result.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.IValidationResultCollection">
            <summary>
            Contains items of type IValidationResult.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IValidationResultCollection.Count">
            <summary>
            Number of items in the collection.
            </summary>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IValidationResultCollection.Item(System.Int32)">
            <summary>
            Returns an IValidationResult item. Throws an argument out of range exception if invalid index.
            </summary>
            <param name="index">Numerical index of an IValidationResult item.</param>
            <returns>An IValidationResult.</returns>
        </member>
        <member name="P:StatNeth.Blaise.API.DataInterface.IValidationResultCollection.IsValid">
            <summary>
            Returns True if the collection contains 0 items or only items with severity is Information or Warning.
            </summary>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.IValidationResultCollection.Contains(StatNeth.Blaise.API.DataInterface.ValidationResultSeverity)">
            <summary>
            Returns True if the collection contains items with the specified (combinations of) severity.
            </summary>
            <param name="severity">The severity to look for. You may specify multiple values by using bitwise OR.</param>
            <returns>True if contained, False otherwise.</returns>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ValidationResultItemType">
            <summary>
            Describes the item type that is involved in a validation result.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.DataInterface">
            <summary>
            DataInterface.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.DataModel">
            <summary>
            DataModel.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.Connection">
            <summary>
            Connection.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.Checksum">
            <summary>
            Checksum.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.Catalog">
            <summary>
            Catalog.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.Schema">
            <summary>
            Schema.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.Table">
            <summary>
            Table.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.Column">
            <summary>
            Column.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.Sequence">
            <summary>
            Sequence.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultItemType.FieldMapping">
            <summary>
            FieldMapping.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.ValidationResultSeverity">
            <summary>
            Describes the severity of a validation result.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultSeverity.Information">
            <summary>
            Information. Represents an informative message to display to the user.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultSeverity.Warning">
            <summary>
            Warning. This violation may be ignored by the user.
            </summary>
        </member>
        <member name="F:StatNeth.Blaise.API.DataInterface.ValidationResultSeverity.Error">
            <summary>
            Error. This violation must be fixed by the user.
            </summary>
        </member>
        <member name="T:StatNeth.Blaise.API.DataInterface.Main">
            <summary>
            Placeholder for module initializer
            </summary>
            <remarks>
            http://einaregilsson.com/module-initializers-in-csharp/
            </remarks>
        </member>
        <member name="M:StatNeth.Blaise.API.DataInterface.Main.Run">
            <summary>
            Run on first construction of this assembly
            </summary>
        </member>
    </members>
</doc>
